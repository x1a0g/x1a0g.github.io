<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>速通汇编</title>
      <link href="/2025/04/19/%E9%80%9F%E9%80%9A%E6%B1%87%E7%BC%96/"/>
      <url>/2025/04/19/%E9%80%9F%E9%80%9A%E6%B1%87%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<h2 id="level1-基本运算"><a href="#level1-基本运算" class="headerlink" title="level1 基本运算"></a>level1 基本运算</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//level1 简单整数运算</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hwx-a:%d\n&quot;</span>, a);</span><br><span class="line"><span class="type">int</span> b = <span class="number">2186</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hwx-b:%d\n&quot;</span>, b);</span><br><span class="line"><span class="type">int</span> c = a + b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line"><span class="type">int</span> d = a - b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);</span><br><span class="line"><span class="type">int</span> e = a * b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, e);</span><br><span class="line"><span class="type">int</span> f = a / b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>反汇编代码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp esp   # 栈顶和栈顶</span><br><span class="line">sub esp,18    # 栈是向下增长的  18的10进制是24  上述有6个变量 一个变量4字节</span><br><span class="line">mov dword ptr ss:[ebp-4],A  #访问栈段（`ss`）中，以 `ebp-4` 为地址的4字节（`dword`）内存单元，赋值为A</span><br><span class="line">mov eax,dword ptr ss:[ebp-4]   # eax赋值为A</span><br><span class="line">push eax                   #_printf入参 2（A）</span><br><span class="line">push enc-me.ED2100         #_printf入参 1 格式化字符串变量</span><br><span class="line">call &lt;enc-me._printf&gt;      #函数调用</span><br><span class="line">add esp,8              #清除刚才的两个push</span><br><span class="line">mov dword ptr ss:[ebp-8],88A</span><br><span class="line">mov ecx,dword ptr ss:[ebp-8]</span><br><span class="line">push ecx</span><br><span class="line">push enc-me.ED210C</span><br><span class="line">call &lt;enc-me._printf&gt;</span><br><span class="line">add esp,8</span><br><span class="line">mov edx,dword ptr ss:[ebp-4]   #edx = A</span><br><span class="line">add edx,dword ptr ss:[ebp-8]   #edx = A + 88A</span><br><span class="line">mov dword ptr ss:[ebp-10],edx  #ebp-10(int c) = edx</span><br><span class="line">mov eax,dword ptr ss:[ebp-10]</span><br><span class="line">push eax                     #_printf入参 2（int c）</span><br><span class="line">push enc-me.ED2118           #格式化字符串</span><br><span class="line">call &lt;enc-me._printf&gt;</span><br><span class="line">add esp,8</span><br><span class="line">mov ecx,dword ptr ss:[ebp-4]</span><br><span class="line">sub ecx,dword ptr ss:[ebp-8]   #减法</span><br><span class="line">mov dword ptr ss:[ebp-14],ecx</span><br><span class="line">mov edx,dword ptr ss:[ebp-14]</span><br><span class="line">push edx</span><br><span class="line">push enc-me.ED211C</span><br><span class="line">call &lt;enc-me._printf&gt;</span><br><span class="line">add esp,8</span><br><span class="line">mov eax,dword ptr ss:[ebp-4]</span><br><span class="line">imul eax,dword ptr ss:[ebp-8]  #乘法</span><br><span class="line">mov dword ptr ss:[ebp-18],eax</span><br><span class="line">mov ecx,dword ptr ss:[ebp-18]</span><br><span class="line">push ecx</span><br><span class="line">push enc-me.ED2120</span><br><span class="line">call &lt;enc-me._printf&gt;</span><br><span class="line">add esp,8</span><br><span class="line">mov eax,dword ptr ss:[ebp-4]</span><br><span class="line"></span><br><span class="line">cdq   </span><br><span class="line">/*将eax的符号位扩展到 edx，形成 64 位被除数 edx:eax</span><br><span class="line">如果 `eax` 是正数（最高位为 0），`edx` 被设为 `0x00000000`。</span><br><span class="line">如果 `eax` 是负数（最高位为 1），`edx` 被设为 `0xFFFFFFFF`。*/</span><br><span class="line"></span><br><span class="line">idiv dword ptr ss:[ebp-8]</span><br><span class="line">mov dword ptr ss:[ebp-C],eax</span><br><span class="line">mov edx,dword ptr ss:[ebp-C]</span><br><span class="line">push edx</span><br><span class="line">push enc-me.ED2124</span><br><span class="line">call &lt;enc-me._printf&gt;</span><br><span class="line">add esp,8</span><br><span class="line">mov eax,dword ptr ss:[ebp-C]</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret </span><br></pre></td></tr></table></figure><blockquote><p>栈上结果</p></blockquote><style>.lturmccgqydm{}</style><img src="/2025/04/19/%E9%80%9F%E9%80%9A%E6%B1%87%E7%BC%96/Obsidian_mySqToPsJn.png" class="lturmccgqydm" alt="Obsidian_mySqToPsJn"><h2 id="level2-条件分支"><a href="#level2-条件分支" class="headerlink" title="level2 条件分支"></a>level2 条件分支</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        x = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>汇编</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">push ecx</span><br><span class="line">mov dword ptr ss:[ebp-4],5    # 赋值 ebp-4=5</span><br><span class="line">cmp dword ptr ss:[ebp-4],0    # 比较  5和0比较</span><br><span class="line">jle enc-me.51101A             # 如果是小于的情况 跳到</span><br><span class="line">mov dword ptr ss:[ebp-4],1    # 赋值ebp-4=1</span><br><span class="line">jmp enc-me.511021</span><br><span class="line">51101A    mov dword ptr ss:[ebp-4],FFFFFFFF #小于跳转到这  ebp-4 = -1</span><br><span class="line">511021    mov eax,dword ptr ss:[ebp-4]      #否则跳转到这</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret </span><br></pre></td></tr></table></figure><h2 id="level3-循环结构"><a href="#level3-循环结构" class="headerlink" title="level3 循环结构"></a>level3 循环结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i=i<span class="number">+2</span>) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>汇编</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">       push ebp</span><br><span class="line">       mov ebp,esp</span><br><span class="line">       sub esp,8</span><br><span class="line">       mov dword ptr ss:[ebp-8],0    #赋值 ebp-8=0  设ebp-8为 m</span><br><span class="line">       mov dword ptr ss:[ebp-4],1    #赋值 ebp-4=1  设ebp-4为 n</span><br><span class="line">       jmp enc-me.5D101F</span><br><span class="line">5D1016 mov eax,dword ptr ss:[ebp-4]  # eax = n</span><br><span class="line">       add  eax,2                    # eax += 2</span><br><span class="line">       mov dword ptr ss:[ebp-4],eax  # n = eax  (n+=2)</span><br><span class="line">5D101F cmp dword ptr ss:[ebp-4],A    #比较 n  和 A（10）</span><br><span class="line">       jg enc-me.5D1030              #大于跳到5D1030  小于等于走下面</span><br><span class="line">       mov ecx,dword ptr ss:[ebp-8]  # ecx = m</span><br><span class="line">       add ecx,dword ptr ss:[ebp-4]  # ecx = ecx + n</span><br><span class="line">       mov dword ptr ss:[ebp-8],ecx  # m = ecx   (m +=  n)</span><br><span class="line">       jmp enc-me.5D1016             # 跳到5D1016执行</span><br><span class="line">5D1030 mov eax,dword ptr ss:[ebp-8]  #大于跳到这  返回参数为 m</span><br><span class="line">       mov esp,ebp</span><br><span class="line">       pop ebp</span><br><span class="line">       ret </span><br><span class="line">&gt; 按照逻辑写出来是这样</span><br><span class="line">int m=0,n=1</span><br><span class="line">while(n&lt;=10)&#123;</span><br><span class="line">m += n</span><br><span class="line">n +=2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="level4-函数调用"><a href="#level4-函数调用" class="headerlink" title="level4 函数调用"></a>level4 函数调用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//level4  函数调用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">add</span>(<span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">mov eax,dword ptr ss:[ebp+8]</span><br><span class="line">add eax,dword ptr ss:[ebp+C]</span><br><span class="line">pop ebp</span><br><span class="line">ret </span><br><span class="line">int3 </span><br><span class="line">int3 </span><br><span class="line">int3 </span><br><span class="line">int3 </span><br><span class="line">int3 </span><br><span class="line">push ebp                     //main</span><br><span class="line">mov ebp,esp</span><br><span class="line">push ecx                    //分配result的空间</span><br><span class="line">push 7                      //  第二个参数</span><br><span class="line">push 3                      //  第一个参数</span><br><span class="line">call &lt;enc-me.int __cdecl add(int, int)&gt;  //调用add方法</span><br><span class="line">add esp,8                   //平衡栈空间 清除push进来的两个参数</span><br><span class="line">mov dword ptr ss:[ebp-4],eax   //赋返回值</span><br><span class="line">mov eax,dword ptr ss:[ebp-4]</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret </span><br></pre></td></tr></table></figure><p>在调用add方法的后  栈的结构通常为 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ebp</span><br><span class="line">返回地址 ebp+4</span><br><span class="line">ebp+8   第一个参数</span><br><span class="line">ebc+c   第二个参数</span><br></pre></td></tr></table></figure><h2 id="level5-数组与指针"><a href="#level5-数组与指针" class="headerlink" title="level5 数组与指针"></a>level5 数组与指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//level5 函数与指针</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">3</span>] = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span> &#125;;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>汇编</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,14</span><br><span class="line">mov dword ptr ss:[ebp-14],A</span><br><span class="line">mov dword ptr ss:[ebp-10],14</span><br><span class="line">mov dword ptr ss:[ebp-C],1E</span><br><span class="line">mov dword ptr ss:[ebp-8],0</span><br><span class="line">mov dword ptr ss:[ebp-4],0</span><br><span class="line">jmp enc-me.CF1034</span><br><span class="line">CF102B mov eax,dword ptr ss:[ebp-4]    //这一行判断ebp-4这个循环累加变量</span><br><span class="line">add eax,1</span><br><span class="line">mov dword ptr ss:[ebp-4],eax</span><br><span class="line">CF1034  cmp dword ptr ss:[ebp-4],3</span><br><span class="line">jge enc-me.CF1049   //  &gt;=3是返回</span><br><span class="line">mov ecx,dword ptr ss:[ebp-4]   //小于3才会走</span><br><span class="line">mov edx,dword ptr ss:[ebp-8]  //返回值</span><br><span class="line">add edx,dword ptr ss:[ebp-14 +ecx*4] //核心  数组的基地址 + 循环累加*数据宽度</span><br><span class="line">mov dword ptr ss:[ebp-8],edx</span><br><span class="line">jmp enc-me.CF102B</span><br><span class="line">CF1049 mov eax,dword ptr ss:[ebp-8]  //这一行判断ebp-8为返回值</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret </span><br></pre></td></tr></table></figure><h2 id="level6-类"><a href="#level6-类" class="headerlink" title="level6 类"></a>level6 类</h2><blockquote><p>main函数入口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">push edi</span><br><span class="line">push esi</span><br><span class="line">push dword ptr ds:[eax]</span><br><span class="line">call project1.D31040</span><br><span class="line">add esp,C</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体和类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> v)</span> </span>&#123; value = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    obj.<span class="built_in">setValue</span>(<span class="number">42</span>);</span><br><span class="line">    <span class="keyword">return</span> obj.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">push ecx</span><br><span class="line">push 2A</span><br><span class="line">/*</span><br><span class="line">`lea` 指令：  </span><br><span class="line">    计算 `[ebp-4]` 的有效地址（即 `0x0FF8`），并将其存入 `ECX` 寄存器。  </span><br><span class="line">    此时，`ECX` 的值是主函数局部变量 `[ebp-4]` 的地址。</span><br><span class="line">传递地址的目的：  </span><br><span class="line">    被调用函数 `enc-me.D71080` 需要通过 `ECX` 接收 `this` 指针（即主函数局部变量的地址），从而修改该地址指向的内存。</span><br><span class="line">*/</span><br><span class="line">lea ecx,dword ptr ss:[ebp-4] </span><br><span class="line">call enc-me.D71080</span><br><span class="line">mov eax,dword ptr ss:[ebp-4]</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//enc-me.D71080</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">push ecx</span><br><span class="line">mov dword ptr ss:[ebp-4],ecx</span><br><span class="line">mov eax,dword ptr ss:[ebp-4]</span><br><span class="line">mov ecx,dword ptr ss:[ebp+8]</span><br><span class="line">mov dword ptr ds:[eax],ecx  //从这一句来看 ecx也是对象第一个参数的位置</span><br><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br><span class="line">ret 4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">地址       内容</span><br><span class="line">0x0FE8    | 0x0FF8     | ← ESP = 0x0FE8（保存的 ECX 值）</span><br><span class="line">0x0FEC    | 0x0FFC     | ← EBP = 0x0FEC</span><br><span class="line">0x0FF0    | 返回地址    |</span><br><span class="line">0x0FF4    | 0x2A      |</span><br><span class="line">0x0FF8    | ECX 值     |</span><br><span class="line">0x0FFC    | 0x1000     |</span><br><span class="line">0x1000    |            |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">赋值之后</span><br><span class="line">地址       内容</span><br><span class="line">0x0FE8    | 0x0FF8     | ← ESP = 0x0FE8（被调用函数局部变量）</span><br><span class="line">0x0FEC    | 0x0FFC     | ← EBP = 0x0FEC</span><br><span class="line">0x0FF0    | 返回地址    |</span><br><span class="line">0x0FF4    | 0x2A      | ← 参数 [ebp+8]</span><br><span class="line">0x0FF8    | 0x2A      | ← 主函数 [ebp-4] 被修改</span><br><span class="line">0x0FFC    | 0x1000     |</span><br><span class="line">0x1000    |            |</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="level7-递归"><a href="#level7-递归" class="headerlink" title="level7 递归"></a>level7 递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">factorial</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">691000 push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">cmp dword ptr ss:[ebp+8],1</span><br><span class="line">jg enc-me.691010</span><br><span class="line">mov eax,1              //当n&lt;=1 进这</span><br><span class="line">jmp enc-me.691023      //走这一步就是弹栈</span><br><span class="line">691010 mov eax,dword ptr ss:[ebp+8]</span><br><span class="line">sub eax,1</span><br><span class="line">push eax</span><br><span class="line">call enc-me.691000</span><br><span class="line">add esp,4             //ret走这</span><br><span class="line">imul eax,dword ptr ss:[ebp+8]  //在归的过程中解决</span><br><span class="line">691023 pop ebp</span><br><span class="line">ret </span><br></pre></td></tr></table></figure><p>在fac（5）到fac（4）的栈情况</p><ul><li><strong>参数压栈</strong>：<code>push 4</code>。</li><li><strong>返回地址</strong>：<code>call factorial</code> 压入返回地址 <code>0xB</code> 也就是call的下一条指令。</li><li>布局如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">地址      内容</span><br><span class="line">0x0FF0  | 返回地址 0xB    | ← ESP = 0x0FF0</span><br><span class="line">0x0FF4  | 参数 n=4       |</span><br><span class="line">0x0FF8  | 旧 EBP (main) |</span><br><span class="line">0x0FFC  | 返回地址 0xA    |</span><br><span class="line">0x1000  | 参数 n=5       |</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO多路复用代码实现</title>
      <link href="/2025/04/04/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/04/04/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="java实现BIO"><a href="#java实现BIO" class="headerlink" title="java实现BIO"></a>java实现BIO</h2><ol><li><strong>BIO服务端特点</strong>：<ol><li>使用<code>ServerSocket</code>和<code>Socket</code>进行网络通信</li><li><code>accept()</code>方法阻塞等待新连接</li><li>每个客户端连接需要独立的处理线程</li><li>读写操作(<code>readLine()/println()</code>)都是阻塞的</li></ol></li><li><strong>执行流程</strong>：<ol><li>启动服务端后进入accept阻塞状态</li><li>客户端连接时创建新线程处理</li><li>线程内循环读取客户端输入并发送响应</li><li>客户端断开连接后线程结束</li></ol></li><li><strong>与NIO的主要区别</strong>：<ol><li>每个连接占用独立线程</li><li>线程在IO操作时会被阻塞</li><li>无法高效处理大量并发连接</li><li>编程模型相对简单直接</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">9999</span>);</span><br><span class="line">    System.out.println(STR.<span class="string">&quot;开启服务监听:\&#123;serverSocket.getLocalPort()&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">accept</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">        System.out.println(STR.<span class="string">&quot;远程地址\&#123;accept.getRemoteSocketAddress()&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//业务处理，此处仅仅作为演示</span></span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><style>.ypadvoqsiwrt{}</style><img src="/2025/04/04/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/Xshell_3wQwy145Iz.png" class="ypadvoqsiwrt" alt="Xshell_3wQwy145Iz"><h2 id="java实现nio"><a href="#java实现nio" class="headerlink" title="java实现nio"></a>java实现nio</h2><ol><li><strong>服务器端流程：</strong><ol><li>创建Selector和ServerSocketChannel</li><li>绑定端口并注册ACCEPT事件</li><li>通过事件循环处理连接和读写操作</li><li>收到消息后发送回显响应</li></ol></li><li><strong>客户端流程：</strong><ol><li>创建SocketChannel并连接服务器</li><li>发送测试消息并等待响应</li><li>使用非阻塞模式进行基本IO操作</li></ol></li><li><strong>核心NIO组件：</strong><ol><li>Selector：实现多路复用，监控多个通道的事件</li><li>ByteBuffer：数据读写容器（注意flip操作）</li><li>Channel：通信通道（ServerSocketChannel&#x2F;SocketChannel）</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();<span class="comment">//开启一个selector选择器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启服务器端的通道</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">9999</span>));</span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="literal">false</span>);<span class="comment">//设置非阻塞</span></span><br><span class="line">        <span class="comment">//channel注册到selector</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        System.out.println(STR.<span class="string">&quot;开启监听端口:\&#123;9999&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            selector.select();<span class="comment">//阻塞等待事件</span></span><br><span class="line"></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历事件</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">event</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果是连接事件</span></span><br><span class="line">                <span class="keyword">if</span> (event.isAcceptable())&#123;</span><br><span class="line">                    <span class="type">ServerSocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (ServerSocketChannel) event.channel();</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> channel.accept();</span><br><span class="line">                    client.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    client.register(selector, SelectionKey.OP_READ);<span class="comment">//连接成功后注册读事件</span></span><br><span class="line">                    System.out.println(STR.<span class="string">&quot;当前连接对象:\&#123;client.getRemoteAddress()&#125;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果是read事件</span></span><br><span class="line">                <span class="keyword">if</span> (event.isReadable())&#123;</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) event.channel();</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">bbf</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> channel.read(bbf);</span><br><span class="line">                    bbf.flip();</span><br><span class="line">                    <span class="keyword">if</span> (len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bbf.array(), <span class="number">0</span>, len));</span><br><span class="line">                        channel.write(ByteBuffer.wrap(<span class="string">&quot;recv ok\n&quot;</span>.getBytes()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            iterator.remove();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><style>.owfjatwmcdvn{}</style><img src="/2025/04/04/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/idea64_ZJTqYlnPw1.png" class="owfjatwmcdvn" alt="idea64_ZJTqYlnPw1"><h2 id="netty实现"><a href="#netty实现" class="headerlink" title="netty实现"></a>netty实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.east.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyTestIO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);<span class="comment">//处理连接事件</span></span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">16</span>);<span class="comment">//我得电脑16核</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//组织启动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">            bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)<span class="comment">//背压队列 也就是我listen状态的连接队列</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel sc)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> sc.pipeline();</span><br><span class="line">                            <span class="comment">//入栈方向 client-》server 正序 //执行顺序 1-&gt;2</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>());  <span class="comment">//1</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> <span class="title class_">Client2ServerInBoundChannelHandler</span>()); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">//出站方向 server-&gt;client  倒序 执行顺序 3-&gt;2-&gt;1</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ServerClientOutBoundHandler</span>()); <span class="comment">//1</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>()); <span class="comment">//2</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> <span class="title class_">MsgHandler</span>()); <span class="comment">//3</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;开启监听9999&quot;</span>);</span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">cf</span> <span class="operator">=</span> bootstrap.bind(<span class="number">9999</span>).sync();</span><br><span class="line">            cf.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client2ServerInBoundChannelHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(STR.<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">        ctx.channel().writeAndFlush(<span class="string">&quot;conn success\n&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.channelActive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//读取数据</span></span><br><span class="line">        System.out.println(msg);</span><br><span class="line">        ctx.channel().writeAndFlush(<span class="string">&quot;recv ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServerClientOutBoundHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server端-----&gt;client&quot;</span>);</span><br><span class="line"><span class="comment">//        msg = STR.&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">//                \&#123;msg&#125; step me\n</span></span><br><span class="line"><span class="comment">//                &quot;&quot;&quot;;</span></span><br><span class="line">        ctx.write(msg,promise);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MsgHandler</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageEncoder</span>&lt;String&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        s = s + <span class="string">&quot; step me\n&quot;</span>;</span><br><span class="line">        list.add(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><style>.wcmxncvvwfuv{}</style><img src="/2025/04/04/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/idea64_FDt1zqWUEF.png" class="wcmxncvvwfuv" alt="idea64_FDt1zqWUEF">]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helmV3标准包打包</title>
      <link href="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/"/>
      <url>/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是helm"><a href="#1、什么是helm" class="headerlink" title="1、什么是helm"></a>1、什么是helm</h1><p>官网  <a href="https://helm.sh/zh/docs/">https://helm.sh/zh/docs/</a></p><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/1714009200848-30b0de4e-e036-4183-9086-5e95b402ebc4.png" class=""><blockquote><p><font style="color:rgb(7, 19, 62);">Helm是</font>**<font style="color:rgb(7, 19, 62);">一个用于Kubernetes的包管理工具，它主要用于简化在Kubernetes集群中部署和管理应用程序的过程</font>**类似于yum和apt</p></blockquote><p><strong><font style="color:rgb(51, 51, 51);">Helm存在以下特点：</font></strong></p><ol><li><strong><font style="color:rgb(7, 19, 62);">简化部署流程</font></strong><font style="color:rgb(7, 19, 62);">：Helm通过提供一种方式来定义、安装和升级应用程序，使得部署过程更加高效和一致。使用Helm，开发者可以描述应用程序所需的所有资源（如服务、卷、路由等），然后使用单个命令将这些资源部署到Kubernetes集群上。</font></li><li><strong><font style="color:rgb(7, 19, 62);">Charts管理</font></strong><font style="color:rgb(7, 19, 62);">：Helm的核心概念是Charts，它们是预先配置的应用程序或服务的打包版本。这些Charts可以被定制并用于在不同的环境中部署相同的应用，确保了环境的一致性和可重复性。</font></li><li><strong><font style="color:rgb(7, 19, 62);">节省时间</font></strong><font style="color:rgb(7, 19, 62);">：对于需要部署多个微服务的项目，Helm可以显著减少部署时间和出错的可能性。它避免了手动执行每个服务的部署，通过自动化的方式提高了效率。</font></li></ol><p><strong><font style="color:rgb(7, 19, 62);">Helm有3个重要概念：</font></strong></p><ol><li><font style="color:rgb(7, 19, 62);">helm：一个命令行客户端工具，主要用于Kubernetes应用chart的创建、打包、发 布和管理。</font></li><li><font style="color:rgb(7, 19, 62);">Chart：应用描述，一系列用于描述k8s资源相关文件的集合。</font></li><li><font style="color:rgb(7, 19, 62);">Release：基于Chart的部署实体，一个chart被Helm运行后将会生成对应的一个 release；将在k8s中创建出真实运行的资源对象。</font></li></ol><h1 id="2、如何使用（基于3-7-x）"><a href="#2、如何使用（基于3-7-x）" class="headerlink" title="2、如何使用（基于3.7.x）"></a><font style="color:rgb(51, 51, 51);">2、如何使用（基于3.7.x）</font></h1><h2 id="2-1、安装Helm"><a href="#2-1、安装Helm" class="headerlink" title="2.1、安装Helm"></a>2.1、安装Helm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line"><span class="built_in">sudo</span> wget https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxvf helm-v3.11.2-linux-amd64.tar.gz </span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line"><span class="built_in">mv</span> linux-amd64/helm /usr/local/bin/helm</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">helm version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加仓库源信息</span></span><br><span class="line">-- 官方库</span><br><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line">-- stable标准包</span><br><span class="line">helm repo add stable http://mirror.azure.cn/kubernetes/charts</span><br><span class="line">-- 阿里云</span><br><span class="line">helm repo add allyun https://kubernetes.oss-cn-hangzhou.allyuncs.com/charts</span><br><span class="line"><span class="comment">#更新仓库</span></span><br><span class="line">helm repo update</span><br><span class="line"><span class="comment">#查看仓库源</span></span><br><span class="line">helm repo <span class="built_in">ls</span></span><br><span class="line"><span class="comment">#删除仓库</span></span><br><span class="line">helm repo remove aliyun</span><br></pre></td></tr></table></figure><h2 id="2-2、使用Helm"><a href="#2-2、使用Helm" class="headerlink" title="2.2、使用Helm"></a><font style="color:rgb(51, 51, 51);">2.2、使用Helm</font></h2><h3 id="2-2-1、创建一个Chart"><a href="#2-2-1、创建一个Chart" class="headerlink" title="2.2.1、创建一个Chart"></a>2.2.1、创建一个Chart</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> helm create mychart</span><br></pre></td></tr></table></figure><h3 id="2-2-2、打包"><a href="#2-2-2、打包" class="headerlink" title="2.2.2、打包"></a>2.2.2、打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> helm lint mychart/</span><br><span class="line"><span class="built_in">sudo</span> helm package ./mychart</span><br></pre></td></tr></table></figure><h3 id="2-2-3、安装"><a href="#2-2-3、安装" class="headerlink" title="2.2.3、安装"></a>2.2.3、安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">helm install demo(pod名称) ./mychat </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已经安装的包</span></span><br><span class="line">helm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载</span></span><br><span class="line">helm uninstall ./mychat</span><br><span class="line"></span><br><span class="line"><span class="comment">#完成之后使用kubectl get pods查看是否为running状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#kubectl get svc 查看具体的地址和端口</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4、常用操作"><a href="#2-2-4、常用操作" class="headerlink" title="2.2.4、常用操作"></a>2.2.4、常用操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#升级</span></span><br><span class="line">helm upgrade releaseName chartName</span><br><span class="line"><span class="comment">#回滚</span></span><br><span class="line">helm rollback releaseName revision</span><br><span class="line"><span class="comment">#检索包信息</span></span><br><span class="line">helm search repo nginx(举例)</span><br><span class="line">helm search hub nginx(举例)</span><br><span class="line"><span class="comment">#查看信息</span></span><br><span class="line">helm status releaseName</span><br><span class="line"><span class="comment">#查看发布历史</span></span><br><span class="line">helm <span class="built_in">history</span> releaseName</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3、关键文件说明"><a href="#2-3、关键文件说明" class="headerlink" title="2.3、关键文件说明"></a>2.3、关键文件说明</h2><h3 id="2-3-1、Chart-yaml"><a href="#2-3-1、Chart-yaml" class="headerlink" title="2.3.1、Chart.yaml"></a>2.3.1、<strong><font style="color:rgb(25, 27, 31);">Chart.yaml</font></strong></h3><p><strong><font style="color:rgb(25, 27, 31);">定义了当前 chart版本，以及描述当前chart用途，其中 name 参数表示 chart 名称，后期上传下载都会用此名称</font></strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">mychart</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">Helm</span> <span class="string">chart</span> <span class="string">for</span> <span class="string">Kubernetes</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">application</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.1</span><span class="number">.0</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="number">1.16</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2、values-yaml"><a href="#2-3-2、values-yaml" class="headerlink" title="2.3.2、values.yaml"></a>2.3.2、<strong><font style="color:rgb(25, 27, 31);">values.yaml</font></strong></h3><p><font style="color:rgb(25, 27, 31);">可变参数，都是在此文件中定义，在yaml模板中引用，比如：</font><font style="color:rgb(25, 27, 31);background-color:rgb(248, 248, 250);">image.repository</font><font style="color:rgb(25, 27, 31);">，而引用则通过</font><font style="color:rgb(25, 27, 31);background-color:rgb(248, 248, 250);">.Values</font><font style="color:rgb(25, 27, 31);">+变量的名进行引用</font></p><h2 id="2-4、实例demo"><a href="#2-4、实例demo" class="headerlink" title="2.4、实例demo"></a>2.4、实例demo</h2><blockquote><ol><li>编写jar包所用的环境的Dockerfile 然后传到私有镜像仓库</li><li>通过helm 创建对应的Chart  修改相应的配置文件</li><li>使用安装命令直接安装成relase就可以安装到k8s当中</li></ol></blockquote><h3 id="2-4-1、编写dockerfile"><a href="#2-4-1、编写dockerfile" class="headerlink" title="2.4.1、编写dockerfile"></a>2.4.1、编写dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">17</span>-jdk-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./east.jar /usr/src/east/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/east</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;myapp.jar&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-2、构建和推送docker镜像"><a href="#2-4-2、构建和推送docker镜像" class="headerlink" title="2.4.2、构建和推送docker镜像"></a>2.4.2、构建和推送docker镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myapp:latest .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以阿里云为例</span></span><br><span class="line"><span class="built_in">sudo</span> docker login --username=xxxxxx registry.cn-beijing.aliyuncs.com</span><br><span class="line"><span class="comment">#输入密码  </span></span><br><span class="line"><span class="comment">#打标签</span></span><br><span class="line">docker tag  4bae764c8ccf registry.cn-beijing.aliyuncs.com/xiao/east:1.1</span><br><span class="line"><span class="comment">#推送</span></span><br><span class="line">docker push registry.cn-beijing.aliyuncs.com/xiao/east:1.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><font style="color:rgb(7, 19, 62);">然后，使用适当的命令将镜像推送到 Docker Hub 或其他容器镜像仓库（例如harbar、阿里云容器仓库）</font></strong></p><h3 id="2-4-3、编写-Helm-Chart"><a href="#2-4-3、编写-Helm-Chart" class="headerlink" title="2.4.3、编写 Helm Chart"></a>2.4.3、<font style="color:rgb(7, 19, 62);">编写 Helm Chart</font></h3><blockquote><p><code>helm create myapp</code>   目录结构如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">myapp/</span><br><span class="line">├── charts/</span><br><span class="line">│   └── myapp/</span><br><span class="line">│       ├── templates/</span><br><span class="line">│       │   ├── deployment.yaml</span><br><span class="line">│       │   └── service.yaml</span><br><span class="line">│       └── values.yaml</span><br><span class="line">└── Chart.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-4、编辑yaml"><a href="#2-4-4、编辑yaml" class="headerlink" title="2.4.4、编辑yaml"></a>2.4.4、编辑yaml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">image:</span><br><span class="line">  repository: registry.cn-beijing.aliyuncs.com/xiao/east</span><br><span class="line">  tag: 1.4</span><br><span class="line">  pullPolicy: IfNotPresent</span><br><span class="line">  <span class="comment">#  registry: registry.cn-beijing.aliyuncs.com/xiao</span></span><br><span class="line"></span><br><span class="line">replicaCount: 1</span><br><span class="line"></span><br><span class="line">service:</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br><span class="line">  port: 8080</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong><font style="color:rgb(7, 19, 62);">可以定义 Deployment 资源，引用您的 Docker 镜像</font></strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: east-deployment</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: east</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: east</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: east-container</span><br><span class="line">        image: &#123;&#123; .Values.image.repository &#125;&#125;:&#123;&#123; .Values.image.tag &#125;&#125;</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 8080</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong><font style="color:rgb(7, 19, 62);">可以定义 Service 资源，以暴露应用</font></strong></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: east-service</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8080</span><br><span class="line">    targetPort: 8080</span><br><span class="line">  selector:</span><br><span class="line">    app: east</span><br></pre></td></tr></table></figure><blockquote><p><strong>可以配置软件包的基本信息</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">appVersion:</span> <span class="number">1.16</span><span class="number">.0</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">A</span> <span class="string">Helm</span> <span class="string">chart</span> <span class="string">for</span> <span class="string">Kubernetes</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">east</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">application</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.1</span><span class="number">.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-5、打包部署-（或者直接在kusp后台上传即可进行部署）"><a href="#2-4-5、打包部署-（或者直接在kusp后台上传即可进行部署）" class="headerlink" title="2.4.5、打包部署 （或者直接在kusp后台上传即可进行部署）"></a>2.4.5、打包部署 （或者直接在kusp后台上传即可进行部署）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm package east</span><br><span class="line"></span><br><span class="line"><span class="comment">#命令部署</span></span><br><span class="line">helm install demo(pod名称) ./east</span><br></pre></td></tr></table></figure><h3 id="2-4-6、可视化界面操作"><a href="#2-4-6、可视化界面操作" class="headerlink" title="2.4.6、可视化界面操作"></a>2.4.6、可视化界面操作</h3><p><strong><font style="color:#DF2A3F;">账号 testxxxxx 密码  aaaaaa</font></strong></p><h4 id="2-4-6-1、登录成功之后-选择-east企业空间"><a href="#2-4-6-1、登录成功之后-选择-east企业空间" class="headerlink" title="2.4.6.1、登录成功之后  选择 east企业空间"></a>2.4.6.1、登录成功之后  选择 east企业空间</h4><style>.xixsjwqbhgzg{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/Typora_SVzf4hFJ6P.png" class="xixsjwqbhgzg" alt="Typora_SVzf4hFJ6P"><h4 id="2-4-6-2、之后点击应用管理–-应用模板"><a href="#2-4-6-2、之后点击应用管理–-应用模板" class="headerlink" title="2.4.6.2、之后点击应用管理–&gt;应用模板"></a>2.4.6.2、之后点击应用管理–&gt;应用模板</h4><style>.pspymxnyiogw{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/Typora_0o68mAFi6W.png" class="pspymxnyiogw" alt="Typora_0o68mAFi6W"><h4 id="2-4-6-3、之后点击创建—-上传"><a href="#2-4-6-3、之后点击创建—-上传" class="headerlink" title="2.4.6.3、之后点击创建—&gt;上传"></a>2.4.6.3、之后点击创建—&gt;上传</h4><style>.funnqilpyohw{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/Typora_GNgClI144D.png" class="funnqilpyohw" alt="Typora_GNgClI144D"><h4 id="2-4-6-4、然后上传自己的helm-package打好的包，如下所示"><a href="#2-4-6-4、然后上传自己的helm-package打好的包，如下所示" class="headerlink" title="2.4.6.4、然后上传自己的helm package打好的包，如下所示"></a>2.4.6.4、然后上传自己的<code>helm package</code>打好的包，如下所示</h4><style>.igldvywnrkvc{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/Typora_mP5fWdKIBS.png" class="igldvywnrkvc" alt="Typora_mP5fWdKIBS"><h4 id="2-4-6-5、然后点击安装即可"><a href="#2-4-6-5、然后点击安装即可" class="headerlink" title="2.4.6.5、然后点击安装即可"></a>2.4.6.5、然后点击安装即可</h4><style>.tqoizrcmxmey{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/Typora_njOsQhJgNF.png" class="tqoizrcmxmey" alt="Typora_njOsQhJgNF"><hr><h4 id="2-4-6-6、之后返回-依次点击进入即可看到访问端口号"><a href="#2-4-6-6、之后返回-依次点击进入即可看到访问端口号" class="headerlink" title="2.4.6.6、之后返回  依次点击进入即可看到访问端口号"></a>2.4.6.6、之后返回  依次点击进入即可看到访问端口号</h4><style>.vsqtjyvxxwso{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/Typora_afTcq81HRU.png" class="vsqtjyvxxwso" alt="Typora_afTcq81HRU"><h1 id="3、部署完成"><a href="#3、部署完成" class="headerlink" title="3、部署完成"></a>3、部署完成</h1><p><strong>部署完成之后使用浏览器访问进行验证，负载均衡策略均生效</strong></p><style>.vzceycbivayo{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/1713951962335-92561735-5335-40ff-890d-b98fe341880d.png" class="vzceycbivayo"><style>.hgynrmryhpco{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/1713951973686-40a0fd3e-b3a3-4122-8663-eac0c20a7317.png" class="hgynrmryhpco"><style>.htjpfrezgeqt{}</style><img src="/2025/03/29/helmV3%E6%A0%87%E5%87%86%E5%8C%85%E6%89%93%E5%8C%85/1713951984715-0a1b9253-fcf3-4228-8db5-56099769f40b.png" class="htjpfrezgeqt">]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes和kubesphere部署安装</title>
      <link href="/2025/03/22/kubernetes%E5%92%8Ckubesphere%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85/"/>
      <url>/2025/03/22/kubernetes%E5%92%8Ckubesphere%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="1、单机环境要求"><a href="#1、单机环境要求" class="headerlink" title="1、单机环境要求"></a>1、单机环境要求</h1><table><thead><tr><th><strong><font style="color:rgb(54, 67, 92);">系统</font></strong></th><th><strong><font style="color:rgb(54, 67, 92);">最低要求（每个节点）</font></strong></th></tr></thead><tbody><tr><td><strong><font style="color:rgb(54, 67, 92);">Ubuntu</font></strong><font style="color:rgb(54, 67, 92);"> </font><em><font style="color:rgb(54, 67, 92);">16.04，18.04，20.04</font></em></td><td><font style="color:rgb(54, 67, 92);">CPU：2 核，内存：4 G，硬盘：40 G</font></td></tr><tr><td><strong><font style="color:rgb(54, 67, 92);">Debian</font></strong><font style="color:rgb(54, 67, 92);"> </font><em><font style="color:rgb(54, 67, 92);">Buster，Stretch</font></em></td><td><font style="color:rgb(54, 67, 92);">CPU：2 核，内存：4 G，硬盘：40 G</font></td></tr><tr><td><strong><font style="color:rgb(54, 67, 92);">CentOS</font></strong><font style="color:rgb(54, 67, 92);"> </font><em><font style="color:rgb(54, 67, 92);">7</font></em><font style="color:rgb(54, 67, 92);">.x</font></td><td><font style="color:rgb(54, 67, 92);">CPU：2 核，内存：4 G，硬盘：40 G</font></td></tr><tr><td><strong><font style="color:rgb(54, 67, 92);">Red Hat Enterprise Linux</font></strong><font style="color:rgb(54, 67, 92);"> </font><em><font style="color:rgb(54, 67, 92);">7</font></em></td><td><font style="color:rgb(54, 67, 92);">CPU：2 核，内存：4 G，硬盘：40 G</font></td></tr><tr><td><strong><font style="color:rgb(54, 67, 92);">SUSE Linux Enterprise Server</font></strong><font style="color:rgb(54, 67, 92);"> </font><em><font style="color:rgb(54, 67, 92);">15</font></em><font style="color:rgb(54, 67, 92);"> </font><strong><font style="color:rgb(54, 67, 92);">&#x2F;openSUSE Leap</font></strong><font style="color:rgb(54, 67, 92);"> </font><em><font style="color:rgb(54, 67, 92);">15.2</font></em></td><td><font style="color:rgb(54, 67, 92);">CPU：2 核，内存：4 G，硬盘：40 G</font></td></tr></tbody></table><ul><li><font style="color:rgb(54, 67, 92);">&#x2F;var&#x2F;lib&#x2F;docker</font><font style="color:rgb(54, 67, 92);"> </font><font style="color:rgb(54, 67, 92);">路径主要用于存储容器数据，在使用和操作过程中数据量会逐渐增加。因此，在生产环境中，建议为</font><font style="color:rgb(54, 67, 92);"> </font><font style="color:rgb(54, 67, 92);">&#x2F;var&#x2F;lib&#x2F;docker</font><font style="color:rgb(54, 67, 92);"> </font><font style="color:rgb(54, 67, 92);">单独挂载一个硬盘。</font></li><li><strong><font style="color:rgb(54, 67, 92);">CPU 必须为 x86_64，暂时不支持 Arm 架构的 CPU。</font></strong></li></ul><h3 id="节点要求"><a href="#节点要求" class="headerlink" title="节点要求"></a><font style="color:rgb(23, 28, 52);">节点要求</font></h3><ul><li><strong><font style="color:rgb(54, 67, 92);">所有节点必须都能通过 </font></strong><font style="color:rgb(54, 67, 92);">SSH</font><font style="color:rgb(54, 67, 92);"> 访问。</font></li><li><strong><font style="color:rgb(54, 67, 92);">所有节点时间同步。</font></strong></li><li><strong><font style="color:rgb(54, 67, 92);">所有节点都应使用 </font></strong><font style="color:rgb(54, 67, 92);">sudo</font><font style="color:rgb(54, 67, 92);">&#x2F;</font><font style="color:rgb(54, 67, 92);">curl</font><font style="color:rgb(54, 67, 92);">&#x2F;</font><font style="color:rgb(54, 67, 92);">openssl</font><font style="color:rgb(54, 67, 92);">&#x2F;</font><font style="color:rgb(54, 67, 92);">tar</font><font style="color:rgb(54, 67, 92);">。</font></li></ul><h1 id="2、安装准备"><a href="#2、安装准备" class="headerlink" title="2、安装准备"></a>2、安装准备</h1><p><strong>本次安装版本环境如下：</strong></p><table><thead><tr><th><strong>服务器版本</strong></th><th>Ubuntu 20.04.2 LTS</th></tr></thead><tbody><tr><td><strong>kubernetes版本</strong></td><td>v1.21.5</td></tr><tr><td><strong>kubesphere版本</strong></td><td>v3.4.1</td></tr><tr><td><strong>helm版本</strong></td><td>v3.9.0</td></tr></tbody></table><h2 id="2-0、安装相关库（三台机器均执行）"><a href="#2-0、安装相关库（三台机器均执行）" class="headerlink" title="2.0、安装相关库（三台机器均执行）"></a>2.0、安装相关库（三台机器均执行）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install socat conntrack ebtables ipset curl -y</span><br></pre></td></tr></table></figure><h2 id="2-1、配置内网互通（三台机器均执行）"><a href="#2-1、配置内网互通（三台机器均执行）" class="headerlink" title="2.1、配置内网互通（三台机器均执行）"></a>2.1、配置内网互通（三台机器均执行）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改名称</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/hostname  </span><br><span class="line"><span class="comment">#修改hosts</span></span><br><span class="line"><span class="built_in">sudo</span> vim /etc/hosts</span><br><span class="line">------------------------</span><br><span class="line">192.168.3.73 master-01</span><br><span class="line">192.168.3.74 node-01</span><br><span class="line">192.168.3.75 node-02</span><br><span class="line">------------------------</span><br><span class="line"><span class="comment">#配置完成互相ping一下</span></span><br><span class="line">ping master-01</span><br><span class="line">ping node-01</span><br><span class="line">ping node-02</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2、配置时间同步（三台机器均执行）"><a href="#2-2、配置时间同步（三台机器均执行）" class="headerlink" title="2.2、配置时间同步（三台机器均执行）"></a>2.2、配置时间同步（三台机器均执行）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="built_in">sudo</span> apt-get install chrony</span><br><span class="line"><span class="comment">#修改配置文件 /etc/chrony/chrony.conf，修改 ntp 服务器配置：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有的 pool 配置</span></span><br><span class="line"><span class="comment">#pool ntp.ubuntu.com        iburst maxsources 4</span></span><br><span class="line"><span class="comment">#pool 0.ubuntu.pool.ntp.org iburst maxsources 1</span></span><br><span class="line"><span class="comment">#pool 1.ubuntu.pool.ntp.org iburst maxsources 1</span></span><br><span class="line"><span class="comment">#pool 2.ubuntu.pool.ntp.org iburst maxsources 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新增以下配置</span></span><br><span class="line">server ntp.api.bz iburst</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启chrony服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart chrony</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证</span></span><br><span class="line"><span class="built_in">sudo</span> chronyc sourcestats -v</span><br></pre></td></tr></table></figure><h2 id="2-3、关闭防火墙（三台机器均执行）"><a href="#2-3、关闭防火墙（三台机器均执行）" class="headerlink" title="2.3、关闭防火墙（三台机器均执行）"></a>2.3、关闭防火墙（三台机器均执行）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#永久</span></span><br><span class="line"><span class="built_in">sudo</span> ufw <span class="built_in">disable</span>   </span><br></pre></td></tr></table></figure><h2 id="2-4、关闭selinux（三台机器均执行）"><a href="#2-4、关闭selinux（三台机器均执行）" class="headerlink" title="2.4、关闭selinux（三台机器均执行）"></a>2.4、关闭selinux（三台机器均执行）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /etc/default/grub</span><br><span class="line"><span class="comment">#找到</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet splash&quot;</span></span><br><span class="line"><span class="comment">#修改为</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet splash selinux=0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> update-grub</span><br><span class="line"><span class="comment">#重启验证</span></span><br><span class="line"><span class="built_in">sudo</span> reboot</span><br><span class="line">getenforce</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-5、关闭交换空间（三台机器均执行）"><a href="#2-5、关闭交换空间（三台机器均执行）" class="headerlink" title="2.5、关闭交换空间（三台机器均执行）"></a>2.5、关闭交换空间（三台机器均执行）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#临时</span></span><br><span class="line">swapoff -a</span><br><span class="line"><span class="comment">#永久</span></span><br><span class="line">sed -ri <span class="string">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><h1 id="3、安装步骤"><a href="#3、安装步骤" class="headerlink" title="3、安装步骤"></a>3、安装步骤</h1><h2 id="3-1、安装kk"><a href="#3-1、安装kk" class="headerlink" title="3.1、安装kk"></a>3.1、安装kk</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.13 sh -</span><br></pre></td></tr></table></figure><h2 id="3-2、创建集群"><a href="#3-2、创建集群" class="headerlink" title="3.2、创建集群"></a>3.2、创建集群</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建配置文件</span></span><br><span class="line">./kk create config --with-kubernetes v1.21.5 --with-kubesphere v3.4.1</span><br></pre></td></tr></table></figure><h3 id="3-2-1、修改配置文件"><a href="#3-2-1、修改配置文件" class="headerlink" title="3.2.1、修改配置文件"></a>3.2.1、修改配置文件</h3><p>按需修改以下内容即可 之后的内容一动不用动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubekey.kubesphere.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sample</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hosts:</span></span><br><span class="line">  <span class="comment">#这块儿需要改一下</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">master-01</span>, <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.73</span>, <span class="attr">internalAddress:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.73</span>, <span class="attr">user:</span> <span class="string">app</span>, <span class="attr">password:</span> <span class="string">&quot;xxxx&quot;</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">node-01</span>, <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.74</span>, <span class="attr">internalAddress:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.74</span>, <span class="attr">user:</span> <span class="string">app</span>, <span class="attr">password:</span> <span class="string">&quot;xxxx&quot;</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">node-02</span>, <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.75</span>, <span class="attr">internalAddress:</span> <span class="number">192.168</span><span class="number">.3</span><span class="number">.75</span>, <span class="attr">user:</span> <span class="string">app</span>, <span class="attr">password:</span> <span class="string">&quot;xxxx&quot;</span>&#125;</span><br><span class="line">  <span class="attr">roleGroups:</span></span><br><span class="line">    <span class="attr">etcd:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master-01</span></span><br><span class="line">    <span class="attr">control-plane:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master-01</span></span><br><span class="line">    <span class="attr">worker:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node-01</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node-02</span></span><br><span class="line">  <span class="attr">controlPlaneEndpoint:</span></span><br><span class="line">    <span class="comment">## Internal loadbalancer for apiservers </span></span><br><span class="line">    <span class="comment"># internalLoadbalancer: haproxy 是否开启高可用</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">domain:</span> <span class="string">lb.kubesphere.local</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6443</span></span><br><span class="line">  <span class="attr">kubernetes:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.21.5</span></span><br><span class="line">    <span class="attr">clusterName:</span> <span class="string">cluster.local</span></span><br><span class="line">    <span class="attr">autoRenewCerts:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">containerManager:</span> <span class="string">docker</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-2、开始安装"><a href="#3-2-2、开始安装" class="headerlink" title="3.2.2、开始安装"></a>3.2.2、开始安装</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./kk</span> <span class="string">create</span> <span class="string">cluster</span> <span class="string">-f</span> <span class="string">config-sample.yaml</span></span><br></pre></td></tr></table></figure><h2 id="3-3、安装完成"><a href="#3-3、安装完成" class="headerlink" title="3.3、安装完成"></a>3.3、安装完成</h2><p><strong>安装完成后会给出后台访问地址 默认：</strong><a href="http://192.168.3.73:30880/login"><strong>http://192.168.3.73:30880/login</strong></a></p><p><strong><font style="color:#DF2A3F;">账号：admin 密码：xxxxxx</font></strong></p><hr><table><thead><tr><th><strong>节点名称</strong></th><th><strong>节点ip</strong></th><th><strong>用户名</strong></th><th>密码</th></tr></thead><tbody><tr><td>master-01</td><td>192.168.3.73</td><td>app</td><td>xxxxx</td></tr><tr><td>node-01</td><td>192.168.3.74</td><td>app</td><td>xxxxx</td></tr><tr><td>node-02</td><td>192.168.3.75</td><td>app</td><td>xxxxx</td></tr></tbody></table><h2 id="3-4、相关问题"><a href="#3-4、相关问题" class="headerlink" title="3.4、相关问题"></a>3.4、相关问题</h2><blockquote><p><font style="color:rgb(115, 119, 122);background-color:rgb(249, 249, 249);">Kubernetes的从节点上运行命令【kubectl】出现了如下错误[root@k8snode1 kubernetes]# kubectl get podThe connection to the server localhost:80</font></p></blockquote><p><font style="color:rgb(36, 41, 46);">出现这个问题的原因是kubectl命令需要使用kubernetes-admin来运行，解决方法如下，将主节点中的【&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf】文件拷贝到从节点相同目录下，然后配置环境变量：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot; &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><p><font style="color:rgb(36, 41, 46);">立即生效</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p><font style="color:rgb(36, 41, 46);">接着再运行kubectl命令就OK了</font></p><h2 id="3-6、常用命令"><a href="#3-6、常用命令" class="headerlink" title="3.6、常用命令"></a><font style="color:rgb(36, 41, 46);">3.6、常用命令</font></h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看节点状态</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">nodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有pod状态</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">pods</span> <span class="string">--all-namespaces</span></span><br><span class="line"><span class="comment">#创建资源</span></span><br><span class="line"><span class="comment">#使用 YAML 配置文件创建服务</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">my-service.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用目录下的所有 YAML、YML 和 JSON 文件创建资源</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">&lt;目录&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看资源</span></span><br><span class="line"><span class="comment">#查看所有容器组</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">pods</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有服务</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">services</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看资源详情</span></span><br><span class="line"><span class="comment">#查看节点详情</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">describe</span> <span class="string">nodes</span> <span class="string">&lt;节点名称&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看容器组详情</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">describe</span> <span class="string">pods</span> <span class="string">&lt;容器组名称&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java agent技术(下)</title>
      <link href="/2025/03/15/Java-agent%E6%8A%80%E6%9C%AF-%E4%B8%8B/"/>
      <url>/2025/03/15/Java-agent%E6%8A%80%E6%9C%AF-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-agent技术"><a href="#Java-agent技术" class="headerlink" title="Java agent技术"></a>Java agent技术</h1><h2 id="0x1-attach的方式"><a href="#0x1-attach的方式" class="headerlink" title="0x1 attach的方式"></a>0x1 attach的方式</h2><h3 id="a-编写MANIFEST-MF"><a href="#a-编写MANIFEST-MF" class="headerlink" title="a. 编写MANIFEST.MF"></a>a. 编写MANIFEST.MF</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Manifest-Version:</span> <span class="number">1.0</span></span><br><span class="line"><span class="attr">Can-Redefine-Classes:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">Can-Retransform-Classes:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">Agent-Class:</span> <span class="string">com.east.demo01.MDemo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="b-定义转换类"><a href="#b-定义转换类" class="headerlink" title="b. 定义转换类"></a>b. 定义转换类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> UnmodifiableClassException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;args:&quot;</span>+args);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">ClassFileTransformer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">                                    ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;=======================================&gt;&quot;</span>+className);</span><br><span class="line">                <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="literal">true</span>);</span><br><span class="line">        inst.retransformClasses(User.class);<span class="comment">//指定要重写的类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jvm核心attach类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor vmd : list) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(vmd.displayName());</span></span><br><span class="line">            <span class="keyword">if</span> (vmd.displayName().endsWith(<span class="string">&quot;UserMain&quot;</span>))&#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">attach</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                attach.loadAgent(<span class="string">&quot;target\\java-agent-demo01-1.0-SNAPSHOT.jar&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;加载agent成功&quot;</span>);</span><br><span class="line">                attach.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="c-修改maven文件"><a href="#c-修改maven文件" class="headerlink" title="c. 修改maven文件"></a>c. 修改maven文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestFile</span>&gt;</span>src/main/resources/MANIFEST.MF<span class="tag">&lt;/<span class="name">manifestFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="d-打包运行"><a href="#d-打包运行" class="headerlink" title="d. 打包运行"></a>d. 打包运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    Thread.sleep(<span class="number">30</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.println(user.getName());</span><br><span class="line">        Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">===========================================================》</span><br><span class="line">WARNING: A Java agent has been loaded <span class="title function_">dynamically</span> <span class="params">(target\java-agent-demo01-<span class="number">1.0</span>-SNAPSHOT.jar)</span></span><br><span class="line">WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide <span class="built_in">this</span> warning</span><br><span class="line">WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage <span class="keyword">for</span> more information</span><br><span class="line">WARNING: Dynamic loading of agents will be disallowed by <span class="keyword">default</span> in a future release</span><br><span class="line">args:<span class="literal">null</span></span><br><span class="line">=======================================&gt;com/east/demo01/User</span><br><span class="line">=======================================&gt;com/east/demo01/User</span><br></pre></td></tr></table></figure><h2 id="0x2-javassist"><a href="#0x2-javassist" class="headerlink" title="0x2 javassist"></a>0x2 javassist</h2><h3 id="a-引入依赖"><a href="#a-引入依赖" class="headerlink" title="a. 引入依赖"></a>a. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.21.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="b-重写User的getName方法"><a href="#b-重写User的getName方法" class="headerlink" title="b. 重写User的getName方法"></a>b. 重写User的getName方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> UnmodifiableClassException, NoSuchMethodException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;args:&quot;</span>+args);</span><br><span class="line"></span><br><span class="line">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class cls : allLoadedClasses) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类是否允许修改:&quot;</span>+inst.isModifiableClass(cls));</span><br><span class="line">            System.out.println(<span class="string">&quot;类名称&quot;</span>+cls.getName());</span><br><span class="line">            <span class="comment">//尝试修改User类的getName方法</span></span><br><span class="line">            <span class="keyword">if</span> (cls.getName().contains(<span class="string">&quot;com.east.demo01.User&quot;</span>)) &#123;</span><br><span class="line">                inst.addTransformer(<span class="keyword">new</span> <span class="title class_">ClassFileTransformer</span>() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined,</span><br><span class="line">                                            ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="type">ClassPool</span> <span class="variable">aDefault</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (classBeingRedefined!=<span class="literal">null</span>)&#123;</span><br><span class="line">                            <span class="type">ClassClassPath</span> <span class="variable">ccp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">                            aDefault.insertClassPath(ccp);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//获取目标类</span></span><br><span class="line">                        <span class="type">CtClass</span> <span class="variable">userclass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            userclass = aDefault.getCtClass(<span class="string">&quot;com.east.demo01.User&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.println(userclass);</span><br><span class="line"></span><br><span class="line">                        <span class="type">CtMethod</span> <span class="variable">setName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            setName = userclass.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&#123;return \&quot;fuck you:\&quot;+name;&#125;&quot;</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            setName.setBody(body);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span>  userclass.toBytecode();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//尝试重写getName方法</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        inst.retransformClasses(User.class);<span class="comment">//指定要重写的类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor vmd : list) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(vmd.displayName());</span></span><br><span class="line">            <span class="keyword">if</span> (vmd.displayName().endsWith(<span class="string">&quot;UserMain&quot;</span>))&#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">attach</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                attach.loadAgent(<span class="string">&quot;java-agent-demo01-1.0-SNAPSHOT.jar&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;加载agent成功&quot;</span>);</span><br><span class="line">                attach.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果如下:</strong></p><style>.serofwbpwdqz{}</style><img src="/2025/03/15/Java-agent%E6%8A%80%E6%9C%AF-%E4%B8%8B/idea64_7RIWOJ3Xkk-1742091562773-2.png" class="serofwbpwdqz" alt="idea64_7RIWOJ3Xkk">]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> java agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java agent技术（上）</title>
      <link href="/2025/03/11/Java-agent%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2025/03/11/Java-agent%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-agent技术"><a href="#Java-agent技术" class="headerlink" title="Java agent技术"></a>Java agent技术</h1><h2 id="0x1、基础知识"><a href="#0x1、基础知识" class="headerlink" title="0x1、基础知识"></a>0x1、基础知识</h2><h3 id="a-什么是java-agent？"><a href="#a-什么是java-agent？" class="headerlink" title="a. 什么是java agent？"></a><strong>a. 什么是java agent？</strong></h3><blockquote><p>Java本身提供了跨平台的能力，其关键实现就是将java代码编译成字节码的方式，之后对于不同的操作系统，实现不同的虚拟机，从而实现所说的一次编译到处运行。而java agent就是jvm提供的一种在运行时修改字节码的技术。</p></blockquote><p>这种技术的应用相对来说也是比较广泛，比如热加载、流量录制、记录请求链路等等</p><h3 id="b-如何使用"><a href="#b-如何使用" class="headerlink" title="b. 如何使用?"></a><strong>b. 如何使用?</strong></h3><ol><li>在jvm启动的时候直接指定agent，这种方式我们通常用的多一点</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:aaaa/agent.jar -jar dsp.jar</span><br></pre></td></tr></table></figure><ol start="2"><li>在java代码中通过编码的方式动态挂载</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VirtualMachine</span> <span class="variable">jvm</span> <span class="operator">=</span> VirtualMachine.attach(<span class="string">&quot;挂载到哪个jvm的进程的id&quot;</span>);</span><br><span class="line">jvm.loadAgent(<span class="string">&quot;/home/agent.jar&quot;</span>); <span class="comment">// agent jar包的路径</span></span><br></pre></td></tr></table></figure><h3 id="c-Instrumentation-类"><a href="#c-Instrumentation-类" class="headerlink" title="c. Instrumentation 类"></a><strong>c. Instrumentation 类</strong></h3><p><code>Instrumentation </code> 位于<code>java.lang.instrument</code>下是java5引入的一个接口，主要用于字节码操作，包含以下几个关键功能</p><ul><li>可以在类加载时修改字节码</li><li>可以在运行时生成新的类</li><li>可以获取jvm的信息</li></ul><p><code>Instrumentation</code>常用接口如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="type">boolean</span> canRetransform)</span>;<span class="comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">redefineClasses</span><span class="params">(ClassDefinition... definitions)</span> hrows ClassNotFoundException, UnmodifiableClassException;<span class="comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;<span class="comment">//删除一个类转换器</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException<span class="comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br></pre></td></tr></table></figure><h3 id="d-premain-和-agentmain"><a href="#d-premain-和-agentmain" class="headerlink" title="d. premain() 和  agentmain()"></a><strong>d. premain() 和  agentmain()</strong></h3><p>java agent要求指定的类必须包含<code>premain</code> 或者 <code>agentmain</code> 作为程序的入口，区别如下</p><ul><li><code>premain</code>  在jvm<strong>启动时</strong>执行，在<strong>类加载器加载类之前</strong>进行增强，属于静态加载</li><li><code>agentmain</code> 在jvm<strong>运行时</strong>通过attach的方式加载agent,<strong>hotspot独有</strong>，属于<strong>动态加载</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs)</span></span><br></pre></td></tr></table></figure><p><code>premain</code>的签名方式有上述两种，优先走第一种参数中包含<code>Instrumentation</code> 的，第一种没有才会走第二种，第一种成功忽略第二种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>agentmain</code> 则提供了一种签名方式</p><h3 id="e-MANIFEST-MF"><a href="#e-MANIFEST-MF" class="headerlink" title="e. MANIFEST.MF"></a>e. MANIFEST.MF</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Can-Redefine-Classes: <span class="literal">true</span>  <span class="comment">//是否能重新定义类 通常为true</span></span><br><span class="line">Can-Retransform-Classes: <span class="literal">true</span> <span class="comment">//是否能重新转换类 通常为true</span></span><br><span class="line">Premain-Class: cn.xxx.XaAgent  <span class="comment">//必须包含指定包含premain方法的全限定名（最后一行需要空行）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x2、Hello-World"><a href="#0x2、Hello-World" class="headerlink" title="0x2、Hello World"></a>0x2、Hello World</h2><h3 id="a-java-agent编写流程"><a href="#a-java-agent编写流程" class="headerlink" title="a. java agent编写流程"></a>a. java agent编写流程</h3><ul><li>定义一个 MANIFEST.MF文件</li><li>定义一个类其中包含<code>premain</code>方法，然后在<code>MANIFEST.MF</code> 定义相关路径</li><li>打包</li><li><code>java -javaagent</code> 使用即可</li></ul><h3 id="b-编码"><a href="#b-编码" class="headerlink" title="b. 编码"></a>b. 编码</h3><blockquote><p>核心代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAgent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====================premain======参数============&gt;&quot;</span>+agentArgs);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">ClassFileTransformer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className,</span><br><span class="line">                                    Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain,</span><br><span class="line">                                    <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;load class &quot;</span> + className);</span><br><span class="line">                <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MANIFEST.MF文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Can-Redefine-Classes: <span class="literal">true</span></span><br><span class="line">Can-Retransform-Classes: <span class="literal">true</span></span><br><span class="line">Premain-Class: com.east.test.TestAgent</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>maven 指定配置文件位置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestFile</span>&gt;</span>src/main/resources/MANIFEST.MF<span class="tag">&lt;/<span class="name">manifestFile</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>打成jar包</p></blockquote><p>在另一个项目中配置使用即可</p><style>.mwgfhmkekuxw{}</style><img src="/2025/03/11/Java-agent%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%8A%EF%BC%89/idea64_vzF7s8wTwd.png" class="mwgfhmkekuxw" alt="idea64_vzF7s8wTwd">]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> java agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC（MySQL驱动）多版本的加载</title>
      <link href="/2025/03/03/JDBC%E5%A4%9A%E7%89%88%E6%9C%AC%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
      <url>/2025/03/03/JDBC%E5%A4%9A%E7%89%88%E6%9C%AC%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC（MySQL驱动）多版本的加载"><a href="#JDBC（MySQL驱动）多版本的加载" class="headerlink" title="JDBC（MySQL驱动）多版本的加载"></a>JDBC（MySQL驱动）多版本的加载</h1><h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><blockquote><p>在工作中遇到了如下需求</p></blockquote><p>​在项目中，需要根据用户选择的Mysql版本，去选择对应的驱动，主要为MySQL5(项目中使用的)和MySQL8.0，然后根据连接的数据库去load数据库中的Information_schema拉取当前数据库的表名及其字段名称，在编码过程中发现如果使用mysql8.0的驱动去连接5的数据库，会出现一些奇怪的问题，比如说MySQL8的<strong>连接加密方式</strong>与5是不一致的，且8默认启动了ssl和一些其他问题。故需要解决以下问题:</p><ul><li>驱动的加载与卸载</li><li>MySQL8和MySQL5驱动的隔离加载</li></ul><h2 id="2、类加载"><a href="#2、类加载" class="headerlink" title="2、类加载"></a>2、类加载</h2><p>代码位于: <code>java.lang.ClassLoader</code></p><p>在jvm中，类加载机制通常是根据双亲委派机制进行的，所以需要首先看一下类加载的核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//加锁防止多线程并发加载同一个类</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 首先检查类是否已经被加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 记录开始时间用于统计</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 先委托给父类加载器加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// 父类加载器无法加载时会抛出异常</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果父类加载器无法加载，则尝试自己加载</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                c = findClass(name);</span><br><span class="line">                <span class="comment">//计算类加载的时间</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类加载map结构如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>key为类的权限定名+类加载器</li><li>value为类的class对象</li></ul><p>这个实现体现了双亲委派的三个核心原则：</p><ol><li><strong>缓存</strong>优先 ：首先检查类是否已经被加载（ findLoadedClass ）</li><li>向上委派 ：如果类未加载，先委托给父类加载器（ parent.loadClass ）或启动类加载器（ findBootstrapClassOrNull ）</li><li>自己加载 ：只有当父类加载器无法加载时，才会调用自己的 findClass 方法进行加载<br>这种机制的主要优点：</li></ol><ul><li>确保类加载的层次性和唯一性</li><li>保证 Java 核心类的安全性（防止核心类被篡改）</li><li>避免类的重复加载</li></ul><blockquote><p><strong>得出结论:</strong></p></blockquote><p>​如果MySQL5的包首先加载，假如此时再去加载MySQL8的相关类，此时会出现有权限定名相同的情况，类已经被加载到内存中，不会再去加载MySQL8中的相关类，所以会出现问题。</p><h2 id="3、类加载隔离"><a href="#3、类加载隔离" class="headerlink" title="3、类加载隔离"></a>3、类加载隔离</h2><p>通常jvm在加载外部类的时候会使用<code>URLclassLoader</code></p><p>  <strong>此时我已经通过maven引入MySQL8，当我使用代码再度加载MySQL5时候如下:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Testxxxx</span> &#123;</span><br><span class="line">    <span class="comment">//此时我已经通过maven引入MySQL8</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driverPath5</span> <span class="operator">=</span> <span class="string">&quot;\\lib\\mysql-connector-java-5.1.45.jar&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver8</span> <span class="operator">=</span> (Driver) Class.forName(driver).newInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(driverPath5).toURI().toURL();</span><br><span class="line">        URL[] urls = <span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">ucl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(urls);</span><br><span class="line">        Class&lt;?&gt; aClass = ucl.loadClass(driver);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver5</span> <span class="operator">=</span> (Driver) ucl.loadClass(driver).newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;mysql5类加载器是:&quot;</span>+driver5.getClass().getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">&quot;mysql8类加载器是:&quot;</span>+driver8.getClass().getClassLoader());</span><br><span class="line">        System.out.println(driver8.getClass().equals(driver5.getClass())); <span class="comment">//验证是否为加载的同一个类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===============res==================</span></span><br><span class="line">Loading class `com.mysql.jdbc.Driver<span class="string">&#x27;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#x27;</span>. The driver is automatically registered via the SPI and manual loading of the driver <span class="keyword">class</span> <span class="title class_">is</span> generally unnecessary.</span><br><span class="line">mysql5类加载器是:jdk.internal.loader.ClassLoaders$AppClassLoader@36baf30c</span><br><span class="line">mysql8类加载器是:jdk.internal.loader.ClassLoaders$AppClassLoader@36baf30c</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>由上述可得：</p><ul><li>由于双亲委派机制的存在，我们在加载同一个类（<strong>权限定名相同</strong>）只会加载一次</li><li>URLClassLoader的方式并不会实现类加载的隔离</li></ul><blockquote><p>实现思路</p></blockquote><p>​在jvm中加载类的时候会有一个缓存的空间用于记录当前类是否类同一个类加载器加载，在上方的内容中也描述过  ，这个map的 <code>key</code> 为类的<strong>权限定名+类加载器</strong>计算出来的的，所以可以说<strong>加入一个类的权限定名相同，但是类加载器不同也是可以实现类的隔离的</strong>。但是因为URLClassLoader是基于双亲委派的，所以无法实现。</p><p>​也就是说，我们需要打破这个双亲委派机制需要<strong>自定义一个类加载器来重写<code>loadclass</code>方法</strong>，实现<strong>优先</strong>使用<strong>自己的类加载器</strong>去加载mysql5的相关类，从而实现<strong>类隔离</strong>。</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RhClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String jarPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RhClassLoader</span><span class="params">(String jarPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jarPath = jarPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 首先检查类是否已经被加载</span></span><br><span class="line">        Class&lt;?&gt; loadedClass = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (loadedClass != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> loadedClass;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 优先尝试自己加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] classData = getClassData(name);</span><br><span class="line">            <span class="keyword">if</span> (classData != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 加载失败，记录日志</span></span><br><span class="line">            System.out.println(<span class="string">&quot;自定义加载失败，尝试父加载器: &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] getClassData(String className) &#123;</span><br><span class="line">        <span class="comment">//JarFile可以读取jar包下的class文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">JarFile</span> <span class="variable">jarFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarFile</span>(jarPath)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">entryName</span> <span class="operator">=</span> className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">            <span class="type">JarEntry</span> <span class="variable">entry</span> <span class="operator">=</span> jarFile.getJarEntry(entryName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> jarFile.getInputStream(entry);</span><br><span class="line">                     <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RhClassLoader</span> <span class="variable">rhClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RhClassLoader</span>(driverPath5);</span><br><span class="line"><span class="type">Driver</span> <span class="variable">driver5</span> <span class="operator">=</span> (Driver) rhClassLoader.loadClass(driver).newInstance();</span><br></pre></td></tr></table></figure><p>这样也存在问题就是<strong>在每一次调用的时候都需要声明一个新的类加载器，从而每一次都会加载新的类元信息进入元空间，所以可以将其改造为单例方式</strong>(弄一个<strong>类加载器池</strong>也可以解决)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.east.cld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RhClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jarPath;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> RhClassLoader instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RhClassLoader</span><span class="params">(String jarPath)</span> &#123;</span><br><span class="line">        RhClassLoader.jarPath = jarPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        jarPath = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RhClassLoader <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jarPath == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;请先调用init方法初始化路径&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        instance = <span class="keyword">new</span> <span class="title class_">RhClassLoader</span>(jarPath);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getResourceAsStream</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">JarFile</span> <span class="variable">jarFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarFile</span>(jarPath)) &#123;</span><br><span class="line">            <span class="type">JarEntry</span> <span class="variable">entry</span> <span class="operator">=</span> jarFile.getJarEntry(name);</span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> jarFile.getInputStream(entry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getResourceAsStream(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> URL <span class="title function_">findResource</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(jarPath);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;jar:file:&quot;</span> + file.getAbsolutePath() + <span class="string">&quot;!/&quot;</span> + name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 首先检查类是否已经被加载</span></span><br><span class="line">        Class&lt;?&gt; loadedClass = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (loadedClass != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> loadedClass;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 优先尝试自己加载</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] classData = getClassData(name);</span><br><span class="line">            <span class="keyword">if</span> (classData != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 加载失败，记录日志</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;自定义加载失败，尝试父加载器: &quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] getClassData(String className) &#123;</span><br><span class="line">        <span class="comment">//JarFile可以读取jar包下的class文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">JarFile</span> <span class="variable">jarFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarFile</span>(jarPath)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">entryName</span> <span class="operator">=</span> className.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">            <span class="type">JarEntry</span> <span class="variable">entry</span> <span class="operator">=</span> jarFile.getJarEntry(entryName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> jarFile.getInputStream(entry);</span><br><span class="line">                     <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>()) &#123;</span><br><span class="line">                    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">int</span> len;</span><br><span class="line">                    <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内存分析 ：</p><ul><li>非单例：每个类加载器都会在元空间中创建类的副本</li><li>单例：相同的类只会被加载一次，共享同一份元数据</li></ul><p>但要注意 ：</p><ul><li>单例类加载器本身不会被GC回收</li><li>需要合理管理加载的类资源</li></ul><h2 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h2><p>DriverManger使用时候存在问题</p><p>有两种情况</p><ol><li>本身的系统已经加载了一个mysql驱动</li><li>本身的系统可能使用的postgresql没有加载MySQL驱动</li></ol><p>DriverManger注册的驱动会在一个<code>private static final CopyOnWriteArrayList&lt;DriverInfo&gt; registeredDrivers = new CopyOnWriteArrayList&lt;&gt;();</code> 中，但是我们在<code>DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);</code> 无法指定我们自己加载驱动，所以不适用与当前的情况，解决方式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Testxxxx</span> &#123;</span><br><span class="line">    <span class="comment">//此时我已经通过maven引入MySQL8</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driverPath5</span> <span class="operator">=</span> <span class="string">&quot;\\lib\\mysql-connector-java-8.0.25.jar&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://192.168.70.129:3306&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(JDBC_URL+<span class="string">&quot;?useSSL=false&quot;</span>, USERNAME, PASSWORD);</span><br><span class="line">        System.out.println(<span class="string">&quot;driver5:&quot;</span>+connection.getMetaData().getDriverVersion());</span><br><span class="line"></span><br><span class="line">        RhClassLoader.init(driverPath5);</span><br><span class="line">        <span class="type">RhClassLoader</span> <span class="variable">rhClassLoader</span> <span class="operator">=</span> RhClassLoader.getInstance();</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver5</span> <span class="operator">=</span> (Driver) rhClassLoader.loadClass(driver).newInstance();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加 useSSL=false 参数</span></span><br><span class="line">        properties.put(<span class="string">&quot;useSSL&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver5.connect(JDBC_URL, properties);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;driver8:&quot;</span>+connect.getMetaData().getDriverVersion());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下:</p><style>.nygafqcfhfkz{}</style><img src="/2025/03/03/JDBC%E5%A4%9A%E7%89%88%E6%9C%AC%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%8D%B8%E8%BD%BD/idea64_UzRFB0JXcb-1741509660454-2-1741509662551-4.png" class="nygafqcfhfkz" alt="idea64_UzRFB0JXcb"><blockquote><p>参考: <a href="https://www.zybuluo.com/Catyee/note/1794751">https://www.zybuluo.com/Catyee/note/1794751</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unidbg 实战某客nsign</title>
      <link href="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/"/>
      <url>/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境</p></blockquote><ul><li>frida16去特征版  </li><li>java8</li><li>unidbg</li></ul><h2 id="一-抓包"><a href="#一-抓包" class="headerlink" title="一. 抓包"></a>一. 抓包</h2><p>抓包使用小黄鸟， 配置相关证书，配置ssl unpining</p><style>.rzojzzovwlci{zoom:50%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_FVOQ0hi3et.png" class="rzojzzovwlci" alt="Obsidian_FVOQ0hi3et"><p>lsposed中启动即可。</p><blockquote><p>抓包结果如下,接口请求头中需要添加nsign进行验签</p></blockquote><style>.vapnxqpyilyk{zoom:80%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_Qvu12zTLhP.png" class="vapnxqpyilyk" alt="Obsidian_Qvu12zTLhP"><h2 id="二-frida分析"><a href="#二-frida分析" class="headerlink" title="二. frida分析"></a>二. frida分析</h2><h3 id="1-jadx寻找入口点"><a href="#1-jadx寻找入口点" class="headerlink" title="1. jadx寻找入口点"></a>1. jadx寻找入口点</h3><p><strong>在jadx载入这个apk后，就需要找到sign生成的位置，通常来说，从一个正向开发的角度来讲，如果我在绝大多数的api都需要添加一个sign校验，那么一个一个加显然是费时费力的，所以如果我是开发者，通常来说会使用aop的形式或者定义一个interceptor，在过滤器filter之后，controller之前定义去实现这个功能。</strong></p><blockquote><p>故 搜索一下interpector</p></blockquote><style>.fmlmjxighfdq{zoom:60%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_xQyQ2sDAAI.png" class="fmlmjxighfdq" alt="Obsidian_xQyQ2sDAAI"><p>找到关键位置，之后进入找到sign在请求头中添加nsign的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = SignUtil.c(path, c2, b2, uuid);</span><br><span class="line">newBuilder2.add(<span class="string">&quot;nsign&quot;</span>, c);</span><br><span class="line"><span class="type">UserProfile</span> <span class="variable">userProfile</span> <span class="operator">=</span> UserProfileProtocol.getUserProfile();</span><br></pre></td></tr></table></figure><p>跟进去找到nsign生成方法，是一个native方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">getSign</span><span class="params">(String str, String str2, Map&lt;String, <span class="type">byte</span>[]&gt; map, String str3, <span class="type">int</span> i)</span>;</span><br></pre></td></tr></table></figure><p>位置在libsignxxx.so  这东西定位一般搜一下System.loadLibrary 就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.loadLibrary(<span class="string">&quot;signxxxx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-frida-hook"><a href="#2-frida-hook" class="headerlink" title="2. frida hook"></a>2. frida hook</h3><blockquote><p>hook  getSign方法,脚本如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest1</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">SignUtil</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xxx.xxx.sign.SignUtil&quot;</span>);  </span><br><span class="line">    <span class="title class_">SignUtil</span>[<span class="string">&quot;getSign&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, str2, map, str3, i</span>) &#123;  </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Gson</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.google.gson.Gson&#x27;</span>).$new();  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;map -&gt; &quot;</span> + <span class="title class_">Gson</span>.<span class="title function_">toJsonTree</span>(map).<span class="title function_">getAsJsonObject</span>());  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignUtil.getSign is called: str=<span class="subst">$&#123;str&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, map=<span class="subst">$&#123;map&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>, i=<span class="subst">$&#123;i&#125;</span>`</span>);  </span><br><span class="line">        <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getSign&quot;</span>](str, str2, map, str3, i);  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignUtil.getSign result=<span class="subst">$&#123;result&#125;</span>`</span>);  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------------&#x27;</span>);  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">        <span class="title function_">hookTest1</span>();  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p>结果如下:</p><style>.gyvutvhqhiwd{zoom:60%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_t19JB3I1oR.png" class="gyvutvhqhiwd" alt="Obsidian_t19JB3I1oR"><p>让gpt把map参数的值转换一下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;app&quot;: &quot;xxxxxx&quot;,</span><br><span class="line">  &quot;from&quot;: &quot;mobile&quot;,</span><br><span class="line">  &quot;pm&quot;: &quot;b276&quot;,</span><br><span class="line">  &quot;city_id&quot;: &quot;14&quot;,</span><br><span class="line">  ...</span><br><span class="line">  &quot;cid&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ida分析"><a href="#3-ida分析" class="headerlink" title="3. ida分析"></a>3. ida分析</h3><blockquote><p>载入ida可以在导出表中发现几个函数，就是此次unidbg调用的目标</p></blockquote><style>.sijfqtcxogrx{zoom:60%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_8j99Ka6CrF.png" class="sijfqtcxogrx" alt="Obsidian_8j99Ka6CrF"><h3 id="4-调用"><a href="#4-调用" class="headerlink" title="4. 调用"></a>4. 调用</h3><blockquote><p>通过unidbg正常补环境调用成功</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignUtil</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SignUtil</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.emulator = AndroidEmulatorBuilder.for64Bit().setProcessName(<span class="string">&quot;com.xxx.xxx.app&quot;</span>).addBackendFactory(<span class="keyword">new</span> <span class="title class_">DynarmicFactory</span>(<span class="literal">false</span>)).build();  </span><br><span class="line">        <span class="built_in">this</span>.vm = emulator.createDalvikVM();  </span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();  </span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));  </span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);  </span><br><span class="line">        <span class="comment">//加载so文件  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;file\\libsign.so&quot;</span>;  </span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dalvikModule</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="literal">true</span>);  </span><br><span class="line">        dalvikModule.callJNI_OnLoad(emulator);  </span><br><span class="line">        log.info(<span class="string">&quot;=============load &#123;&#125; 成功&quot;</span>, path);  </span><br><span class="line">        <span class="keyword">module</span> = dalvikModule.getModule();  </span><br><span class="line">  </span><br><span class="line">        log.info(<span class="string">&quot;===============创建虚拟机成功&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">jsonToMap</span><span class="params">(String json)</span> &#123;  </span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();  </span><br><span class="line">        <span class="comment">// 使用 TypeToken 获取 Map 的类型  </span></span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;  </span><br><span class="line">        &#125;.getType());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//private static native String getSign(String str, String str2, Map&lt;String, byte[]&gt; map, String str3, int i);  </span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSign</span><span class="params">(String str, String str2, Map&lt;String, <span class="type">byte</span>[]&gt; map, String str3, <span class="type">int</span> i)</span> &#123;  </span><br><span class="line">        List&lt;Object&gt; obj = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">        DvmObject&lt;?&gt; dvmObject = vm.resolveClass(<span class="string">&quot;com.x1a0g.xxx&quot;</span>).newObject(<span class="literal">null</span>);  </span><br><span class="line">        <span class="comment">//调用jni函数的时候通常前面加两个参数  JniEnv* a,jclass b,真实的参数  </span></span><br><span class="line">        <span class="type">Pointer</span> <span class="variable">jniEnv</span> <span class="operator">=</span> vm.getJNIEnv();  </span><br><span class="line">        obj.add(jniEnv);  </span><br><span class="line">        obj.add(vm.addLocalObject(dvmObject));<span class="comment">//瞎几把传一个就行  </span></span><br><span class="line">        obj.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, str)));  </span><br><span class="line">        obj.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, str2)));  </span><br><span class="line">        obj.add(vm.addLocalObject(ProxyDvmObject.createObject(vm, map)));  </span><br><span class="line">        obj.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, str3)));  </span><br><span class="line">        obj.add(i);  </span><br><span class="line">        <span class="type">Number</span> <span class="variable">pointer</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x18F0</span>, obj.toArray());<span class="comment">//0x18F0在ida的导出表里面可以看到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取指针位置的值</span></span><br><span class="line">        DvmObject&lt;String&gt; object = vm.getObject(pointer.intValue());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object.getValue(); </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">callIntMethod</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;java/util/HashMap-&gt;size()I&quot;</span>.equals(signature)) &#123;  </span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">value</span> <span class="operator">=</span> (HashMap) dvmObject.getValue();  </span><br><span class="line">            <span class="keyword">return</span> value.size();  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callIntMethod(vm, dvmObject, signature, varArg);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethod(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;java/util/HashMap-&gt;keySet()Ljava/util/Set;&quot;</span>.equals(signature)) &#123;  </span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">res</span> <span class="operator">=</span> (HashMap) dvmObject.getValue();  </span><br><span class="line">            <span class="keyword">return</span> ProxyDvmObject.createObject(vm,res.keySet());  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;java/util/Set-&gt;toArray()[Ljava/lang/Object;&quot;</span>.equals(signature)) &#123;  </span><br><span class="line">            <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> (Set) dvmObject.getValue();  </span><br><span class="line">            <span class="keyword">return</span> ProxyDvmObject.createObject(vm,set.toArray());  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;java/util/HashMap-&gt;get(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>.equals(signature)) &#123;  </span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> (HashMap) dvmObject.getValue();  </span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> varArg.getObjectArg(<span class="number">0</span>).getValue();  </span><br><span class="line">            <span class="keyword">return</span> ProxyDvmObject.createObject(vm,map.get(object));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callObjectMethod(vm, dvmObject, signature, varArg);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">SignUtil</span> <span class="variable">signUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignUtil</span>();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">fc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> + </span><br><span class="line">                <span class="string">&quot;  \&quot;city_id\&quot;: \&quot;14\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;  \&quot;cid\&quot;: []\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;aaaaaaa&quot;</span>;  </span><br><span class="line">        Map&lt;String, <span class="type">byte</span>[]&gt; mm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;String, Object&gt; json = jsonToMap(fc);  </span><br><span class="line">        json.forEach((k, v) -&gt; mm.put(k.toString(), v.toString().getBytes()));  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ccc-ddd-4c75-555-fff&quot;</span>;  </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> signUtil.getSign(str, str2, mm, str3, i);  </span><br><span class="line">        System.out.println(sign);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><style>.qtenrvcpxdwa{zoom:60%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/idea64_afAS2Ccglc.png" class="qtenrvcpxdwa" alt="idea64_afAS2Ccglc">]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>io多路复用</title>
      <link href="/2023/07/04/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
      <url>/2023/07/04/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><blockquote><p>在Linux操作系统中，一切皆文件。那么什么是IO多路复用？</p></blockquote><p>​它通过一种巧妙的方式，允许单个线程同时监控多个I&#x2F;O流的状态，从而极大地提升了系统的并发处理能力。无论是经典的<code>select</code>和<code>poll</code>，还是更高效的<code>epoll</code>，使得构建高性能服务器成为可能。</p><h1 id="2-I-O模型基础"><a href="#2-I-O模型基础" class="headerlink" title="2. I&#x2F;O模型基础"></a>2. I&#x2F;O模型基础</h1><h2 id="2-1-文件描述符"><a href="#2-1-文件描述符" class="headerlink" title="2.1. 文件描述符"></a>2.1. 文件描述符</h2><p>​文件描述符（<strong>File Descriptor，简称FD</strong>）是操作系统用来标识和管理<strong>打开文件</strong>或<strong>io资源</strong>的一个抽象概念。他是操作系统内核为每一个进程维护的一个非负整数，用于跟踪当前进程所打开的文件、网络连接、管道等io资源。</p><p>​文件描述符是操作系统与应用程序的一个桥梁，比如我们使用系统调用(open、socket)，内核会创建一个对应的数据结构，然后返回一个文件描述符作为唯一标识。</p><p>每个进程都会默认分配3个标准的文件描述符分别为:</p><ul><li><strong>0（stdin）</strong> ：标准输入，通常对应键盘输入。</li><li><strong>1（stdout）</strong> ：标准输出，通常对应屏幕输出。</li><li><strong>2（stderr）</strong> ：标准错误输出，用于输出错误信息。</li></ul><p><strong>文件描述符的路径在: <code>/proc/进程号/fd</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-2204:/proc/18902/fd# ll</span><br><span class="line">total 0</span><br><span class="line">dr-x------ 2 root root  0 Feb 23 05:31 ./</span><br><span class="line">dr-xr-xr-x 9 root root  0 Feb 23 05:31 ../</span><br><span class="line">lrwx------ 1 root root 64 Feb 23 05:39 0 -&gt; /dev/null   <span class="comment">#标准输入</span></span><br><span class="line">lrwx------ 1 root root 64 Feb 23 05:39 1 -&gt; /dev/null   <span class="comment">#标准输出</span></span><br><span class="line">lrwx------ 1 root root 64 Feb 23 05:39 2 -&gt; /dev/null   <span class="comment">#标准错误输出</span></span><br><span class="line">lrwx------ 1 root root 64 Feb 23 05:39 3 -&gt; <span class="string">&#x27;socket:[76046]&#x27;</span>  </span><br><span class="line">lrwx------ 1 root root 64 Feb 23 05:39 4 -&gt; <span class="string">&#x27;socket:[73371]&#x27;</span>  <span class="comment"># 表示该文件描述符指向了一个网络套接字，其内核inode编号为76046</span></span><br><span class="line">lrwx------ 1 root root 64 Feb 23 05:39 6 -&gt; <span class="string">&#x27;socket:[68014]&#x27;</span></span><br><span class="line">lrwx------ 1 root root 64 Feb 23 05:39 7 -&gt; <span class="string">&#x27;socket:[73380]&#x27;</span></span><br><span class="line">l-wx------ 1 root root 64 Feb 23 05:39 8 -&gt; /run/systemd/sessions/6.ref|</span><br></pre></td></tr></table></figure><p><strong>进一步查看<code>socket:[76046]</code></strong></p><blockquote><p>可以使用lsof -p <pid></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-2204:/proc/18902/fd# lsof -p 18902 | grep 4u</span><br><span class="line">sshd    18902 root    4u  IPv4              73371      0t0     TCP ubuntu-2204:ssh-&gt;192.168.70.1:56282 (ESTABLISHED)</span><br></pre></td></tr></table></figure><blockquote><p>或者cat &#x2F;proc&#x2F;net&#x2F;tcp</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu-2204:/proc/18902/fd# <span class="built_in">cat</span> /proc/net/tcp | grep 73371</span><br><span class="line">   5: 8146A8C0:0016 0146A8C0:DBDA 01 00000064:00000000 01:00000017 00000000     0        0 73371 4 ffff9b9d4acc08c0 23 4 31 10 52         </span><br></pre></td></tr></table></figure><h2 id="2-2-常见的I-O模型"><a href="#2-2-常见的I-O模型" class="headerlink" title="2.2. 常见的I&#x2F;O模型"></a>2.2. 常见的I&#x2F;O模型</h2><h3 id="2-2-1-阻塞I-O（Blocking-I-O）"><a href="#2-2-1-阻塞I-O（Blocking-I-O）" class="headerlink" title="2.2.1. 阻塞I&#x2F;O（Blocking I&#x2F;O）"></a>2.2.1. 阻塞I&#x2F;O（Blocking I&#x2F;O）</h3><blockquote><p>阻塞io的核心思想就是一来一去，当一个进程发起io操作的时候如果数据尚未准备好或者操作尚未完成，那么此时进程会被阻塞，直到操作完成。</p></blockquote><p><strong>工作流程</strong></p><ul><li>发起io请求 (调用read)，此时操作系统<strong>阻塞等待</strong></li><li>等待数据读取</li><li>唤醒进程执行操作</li></ul><style>.eslnrvtvnhsw{}</style><img src="/2023/07/04/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/image-20250301120451564-1740801895943-4.png" class="eslnrvtvnhsw" alt="image-20250301120451564"><p><strong>伪代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">socket = <span class="number">3</span> <span class="comment">//假设socket启动  文件描述符为3</span></span><br><span class="line">bind(<span class="number">3</span>,<span class="number">8090</span>) <span class="comment">//绑定3号描述符为8090端口</span></span><br><span class="line">listen(<span class="number">3</span>) <span class="comment">//监听文件描述符3</span></span><br><span class="line">accpt(<span class="number">3</span>   <span class="comment">//阻塞描述符3，等待链接</span></span><br></pre></td></tr></table></figure><p>当有一个链接进来 此时 accpt 会创建一个新的文件描述符用于接受数据 新创建的文件描述符<strong>仍为阻塞,伪代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">accpt(<span class="number">3</span>,...) = <span class="number">5</span></span><br><span class="line">recv(<span class="number">5</span>)<span class="comment">//读取5的数据</span></span><br></pre></td></tr></table></figure><p>那么此时 就影响了后续连接  必须开线程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">socket = <span class="number">3</span></span><br><span class="line">bind(<span class="number">3</span>,<span class="number">8090</span>)</span><br><span class="line">listen(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">accpt(<span class="number">3</span>,   = <span class="number">5</span>  <span class="comment">//文件描述符重定向到5，就是和客户端建立socket连接</span></span><br><span class="line">  new thread-&gt;&#123;</span><br><span class="line">recv(<span class="number">5</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么此时在没进来一个连接后，服务端会 clone() 一个线程去5，新的线程继续阻塞等待</p><blockquote><p>缺点：</p></blockquote><ul><li>资源消耗大</li></ul><h3 id="2-2-2-非阻塞I-O（Non-blocking-I-O）"><a href="#2-2-2-非阻塞I-O（Non-blocking-I-O）" class="headerlink" title="2.2.2.非阻塞I&#x2F;O（Non-blocking I&#x2F;O）"></a>2.2.2.非阻塞I&#x2F;O（Non-blocking I&#x2F;O）</h3><blockquote><p>为了改善阻塞io的缺陷，出现了NIO. NIO时代文件描述符不再是阻塞的了 没有数据连接文件描述符直接返回 -1</p></blockquote><p><strong>工作流程</strong></p><style>.lmnbbftprcgd{}</style><img src="/2023/07/04/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/image-20250301122519403-1740803121089-1.png" class="lmnbbftprcgd" alt="image-20250301122519403"><ul><li>发起read系统调用</li><li>数据未准备好返回-1</li><li>一直轮询所有的文件描述符</li><li>知道返回数据</li></ul><p><strong>伪代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fds[]</span><br><span class="line">socket() = <span class="number">3</span></span><br><span class="line">bind(<span class="number">3</span>,<span class="number">8090</span>)</span><br><span class="line">listen(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> fd = accpt(<span class="number">3</span>, <span class="comment">//拿到文件描述符  没有连接就是 -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fd!=<span class="number">-1</span>)&#123;</span><br><span class="line">fds.add(fd)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将所有的文件描述符表遍历一遍</span></span><br><span class="line"><span class="keyword">for</span>（<span class="type">int</span> i=<span class="number">0</span>;i&lt;fds.size();i++）&#123;</span><br><span class="line"><span class="type">int</span> recv = recv(i);</span><br><span class="line"><span class="keyword">if</span>(recv!=<span class="number">-1</span>)&#123;</span><br><span class="line">dosomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>缺点:</p></blockquote><p><strong>这是一种客户端主动询问服务端的方式  每一次询问都需要遍历所有的文件描述符</strong></p><p><strong>内核态用户态切换过于频繁</strong></p><h3 id="2-2-3-信号驱动io"><a href="#2-2-3-信号驱动io" class="headerlink" title="2.2.3. 信号驱动io"></a>2.2.3. 信号驱动io</h3><blockquote><p>这个东西可以说是一种基于回调机制的io模型,他会在<strong>客户端发送read调用后如果数据没有准备好，那么此时不会阻塞客户端，而是在内核中注册了一个信号处理函数，当数据准备完成后，发送一个信号给进程，进程收到信号后开始读取数据。</strong></p></blockquote><p>工作流程</p><style>.brlqpisbyxfd{}</style><img src="/2023/07/04/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/image-20250301125051600-1740804653688-3.png" class="brlqpisbyxfd" alt="image-20250301125051600"><blockquote><p>缺点:</p></blockquote><p>回调机制，实现、开发应用难度大；</p><h3 id="2-3-4-I-O多路复用（I-O-Multiplexing）"><a href="#2-3-4-I-O多路复用（I-O-Multiplexing）" class="headerlink" title="2.3.4. I&#x2F;O多路复用（I&#x2F;O Multiplexing）"></a>2.3.4. I&#x2F;O多路复用（I&#x2F;O Multiplexing）</h3><h4 id="a-select"><a href="#a-select" class="headerlink" title="a. select"></a>a. select</h4><p>在nio的基础上把文件描述符的集合，通过select发送到内核态去做便利</p><p>Linux提供了一个<strong>多路复用器select</strong></p><style>.hovbwaopxcmx{}</style><img src="/2023/07/04/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/1655985283663-67fc41cb-7566-4282-a40a-38ce0a682e61-1740805815003-7.webp" class="hovbwaopxcmx" alt="image.png"><p>此时用户端已经无法解决多次遍历的问题 那么 只能内核发生变化</p><ul><li><p>select(fds) 将这么多的文件描述符集合 传到内核去遍历</p></li><li><p>那么此时用户态到内核态的转变就只有一次了</p></li><li><p>内核遍历完后会返回 m 个需要读取的集合</p></li><li><p>用户态在调用 recv 系统调用 此时 用户态到内核态的转化就成了 m 次 也就是返回给我需要读取的文件描述符的数量</p></li></ul><blockquote><p>此时存在的问题</p></blockquote><p>1、存在 select每次传输数据过大</p><p>2、内核还是存在多次的无用遍历</p><p>3、能监听的端口是有限的 <code>cat /proc/sys/fs/file-max</code>、查看</p><h4 id="b-epoll"><a href="#b-epoll" class="headerlink" title="b. epoll"></a>b. epoll</h4><p>可以在内核中开辟一块儿空间，当一个文件描述符来了就添加到这块儿空间，这样就避免了数据过大的问题</p><style>.iiebswnvrcgi{}</style><img src="/2023/07/04/io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/1655985299871-56d38e7e-b6e4-40d6-95dc-998c88aae71a-1740806478462-11.webp" class="iiebswnvrcgi" alt="image.png"><ul><li><p>socket建立连接 文件描述符为3</p></li><li><p>此时 epoll_create() 文件描述符为6指向内核这片区域</p></li><li><p>然后执行epoll_ctl(fd3,add,fd6,accept)  将fd3添加到fd6的这块区域 事件是 accept</p></li><li><p>假如此时 又来一个fd8是读写事件  那么就是 epoll_ctl  将fd8添加到fd6</p></li><li><p>然后通过网卡的硬件中断  将发生事件的fd放到另一块儿空间</p></li><li><p>程序就是从这个空间获取读写操作</p></li></ul><h3 id="2-3-5-异步I-O（Asynchronous-I-O）"><a href="#2-3-5-异步I-O（Asynchronous-I-O）" class="headerlink" title="2.3.5. 异步I&#x2F;O（Asynchronous I&#x2F;O）"></a>2.3.5. 异步I&#x2F;O（Asynchronous I&#x2F;O）</h3><ul><li>应用程序提交一个 I&#x2F;O 请求后，操作系统接管该请求并在后台执行。</li><li>当 I&#x2F;O 操作完成后，操作系统通过某种机制（如回调函数或事件通知）告知应用程序。</li><li>在此期间，应用程序可以继续执行其他任务，而无需等待或轮询。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next-js AllInOne</title>
      <link href="/2023/01/30/next-js-AllInOne/"/>
      <url>/2023/01/30/next-js-AllInOne/</url>
      
        <content type="html"><![CDATA[<h1 id="1、创建一个nextjs项目"><a href="#1、创建一个nextjs项目" class="headerlink" title="1、创建一个nextjs项目"></a>1、创建一个nextjs项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app nextjs-blog --use-npm --example <span class="string">&quot;https://github.com/vercel/next-learn-starter/tree/master/learn-starter&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2、路由"><a href="#2、路由" class="headerlink" title="2、路由"></a>2、路由</h1><p>如果设置对应的路由需要建立对应的页面 例如</p><ul><li>url为<code>/posts/first-posts</code> 那么就需要建立如下文件 在 <code>pages/posts/first-posts.js</code></li><li><code>pages/index.js</code> 的路由地址是 <code>/</code></li></ul><p><strong>使用Link完成页面的跳转</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Link from &quot;next/link&quot;;</span><br><span class="line"></span><br><span class="line">export default function FirstPost()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">            &lt;Link href=&quot;/&quot;&gt;back home&lt;/Link&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意Link跳转还是在同一个Next app中进行跳转 不是新页面的跳转</strong></p><h1 id="3、常用组件"><a href="#3、常用组件" class="headerlink" title="3、常用组件"></a>3、常用组件</h1><h2 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Head from &#x27;next/head&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;Head&gt;</span><br><span class="line">  &lt;title&gt;First&lt;/title&gt;</span><br><span class="line">&lt;/Head&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="延迟加载和css使用"><a href="#延迟加载和css使用" class="headerlink" title="延迟加载和css使用"></a>延迟加载和css使用</h2><blockquote><p>layout.js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import styles from &#x27;./layout.module.css&#x27;</span><br><span class="line">export default function Layout(&#123;children&#125;)&#123;</span><br><span class="line">    return &lt;div className=&#123;styles.container&#125;&gt;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>layout.mudel.css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">36rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3rem</span> auto <span class="number">6rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><blockquote><p>使用延迟加载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Link from &#x27;next/link&#x27;;</span><br><span class="line">import Head from &#x27;next/head&#x27;;</span><br><span class="line">import Layout from &#x27;../../components/layout&#x27;;</span><br><span class="line">export default function FirstPost() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Layout&gt;</span><br><span class="line">    &lt;Head&gt;</span><br><span class="line">      &lt;title&gt;First&lt;/title&gt;</span><br><span class="line">    &lt;/Head&gt;</span><br><span class="line">      &lt;h1&gt;First Post&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;</span><br><span class="line">        &lt;Link href=&quot;/&quot;&gt;Back to home&lt;/Link&gt;</span><br><span class="line">      &lt;/h2&gt;</span><br><span class="line">      &lt;/Layout&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import styles from &#x27;./layout.module.css&#x27;</span><br><span class="line">export default function Layout(&#123;children&#125;)&#123;</span><br><span class="line">    return &lt;div className=&#123;styles.container&#125;&gt;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装-tailwindcss"><a href="#安装-tailwindcss" class="headerlink" title="安装 tailwindcss"></a>安装 tailwindcss</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install tailwindcss postcss-preset-env postcss-flexbugs-fixes</span><br></pre></td></tr></table></figure><p>根目录创建 <code>postcss.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#x27;tailwindcss&#x27;,</span><br><span class="line">    &#x27;postcss-flexbugs-fixes&#x27;,</span><br><span class="line">    [</span><br><span class="line">      &#x27;postcss-preset-env&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        autoprefixer: &#123;</span><br><span class="line">          flexbox: &#x27;no-2009&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        stage: 3,</span><br><span class="line">        features: &#123;</span><br><span class="line">          &#x27;custom-properties&#x27;: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&quot;use client&quot;</span><br><span class="line">import Image from &quot;next/image&quot;;</span><br><span class="line">import styles from &quot;./page.module.css&quot;;</span><br><span class="line">import &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default function Home() &#123;</span><br><span class="line">  let data = &quot;aaaa&quot;</span><br><span class="line"></span><br><span class="line">  const list = [</span><br><span class="line">    &#123;id:1,name:&quot;小郝&quot;&#125;,</span><br><span class="line">    &#123;id:2,name:&quot;小张&quot;&#125;,</span><br><span class="line">    &#123;id:3,name:&quot;小李&quot;&#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  let [dc,setDc] = useState(&quot;我是你好&quot;);</span><br><span class="line"></span><br><span class="line">  const pDontext = list.map(item=&gt;&#123;</span><br><span class="line">    return &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/li&gt;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  let flag = true</span><br><span class="line">  let divContent = null</span><br><span class="line">  if(flag)&#123;</span><br><span class="line">    divContent = &lt;div&gt;我是div我是flag为真&lt;/div&gt;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    divContent =  &lt;p&gt;我是p标签flag为假&lt;/p&gt;</span><br><span class="line">    // setDc(&quot;我很不好&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &#123;/* &lt;h1&gt;todo list&lt;/h1&gt; */&#125;</span><br><span class="line">        &lt;ul&gt;&#123;pDontext&#125;&lt;/ul&gt;</span><br><span class="line">        &lt;div&gt;&#123;divContent&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;dc&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h2><p><strong>prop传值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;use client&quot;</span><br><span class="line"></span><br><span class="line">function Artcire(prop:any) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;prop.title&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;prop.content&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function Home() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题1&quot; content=&quot;内容1&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题2&quot; content=&quot;内容2&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题3&quot; content=&quot;内容3&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结构表达式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;use client&quot;</span><br><span class="line"></span><br><span class="line">function Artcire(&#123;title,content&#125;) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;content&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function Home() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题1&quot; content=&quot;内容1&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题2&quot; content=&quot;内容2&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题3&quot; content=&quot;内容3&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>常用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&quot;use client&quot;</span><br><span class="line">function Artcire(&#123;title,detail&#125;:any) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;Detail &#123;...detail&#125;/&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">function Detail(&#123;cons,active&#125;:any)&#123;</span><br><span class="line">  return(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h3&gt;&#123;cons&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;h4&gt;&#123;active?&#x27;显示&#x27;:&#x27;隐藏&#x27;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function Home() &#123;</span><br><span class="line"></span><br><span class="line">  const detailData = &#123;</span><br><span class="line">    title:&#x27;文章标题&#x27;,</span><br><span class="line">    detail:&#123;</span><br><span class="line">      cons:&#x27;我是具体的内容&#x27;,</span><br><span class="line">      active:false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Artcire &#123;...detailData&#125;&gt;&lt;/Artcire&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import logo from &#x27;./logo.svg&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line"></span><br><span class="line">function Detail(&#123;children&#125;)&#123;</span><br><span class="line">  return(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">    &lt;button&gt;annq&lt;/button&gt;</span><br><span class="line">    &lt;Detail&gt;</span><br><span class="line">      &lt;li&gt;13&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;33&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;23&lt;/li&gt;</span><br><span class="line">    &lt;/Detail&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>子组件向父组件传值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import logo from &#x27;./logo.svg&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line">import &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Detail(&#123;children,onActiv&#125;)&#123;</span><br><span class="line"></span><br><span class="line">  let [sf,setSf] = useState(true)</span><br><span class="line"></span><br><span class="line">  function cli()&#123;</span><br><span class="line">    setSf(!sf)</span><br><span class="line">    onActiv(sf)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">      &lt;button onClick=&#123;cli&#125;&gt;test&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  function handActiv(stf)&#123;</span><br><span class="line">    console.log(stf)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">    &lt;button onClick=&#123;handClick&#125;&gt;annq&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;state?&#x27;展示&#x27;:&#x27;隐藏&#x27;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;Detail onActiv=&#123;handActiv&#125;&gt;</span><br><span class="line">      &lt;li&gt;13&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;33&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;23&lt;/li&gt;</span><br><span class="line">    &lt;/Detail&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、hook"><a href="#4、hook" class="headerlink" title="4、hook"></a>4、hook</h1><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import logo from &#x27;./logo.svg&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line">import &#123; useReducer &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line"></span><br><span class="line">  function stateReducer(state,action)&#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">      case &quot;incr&quot;:</span><br><span class="line">        return state+1</span><br><span class="line">      case &quot;decr&quot;:</span><br><span class="line">        return state-1</span><br><span class="line">      default:</span><br><span class="line">        return state=0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  let [state,dispacth] = useReducer(stateReducer,0)</span><br><span class="line"></span><br><span class="line">  const handleAdd = ()=&gt; dispacth(&#123;type:&#x27;incr&#x27;&#125;)</span><br><span class="line">  const handleDecr = ()=&gt; dispacth(&#123;type:&#x27;decr&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleAdd&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &#123;state&#125;</span><br><span class="line">      &lt;button onClick=&#123;handleDecr&#125;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><h1 id="5、todo项目"><a href="#5、todo项目" class="headerlink" title="5、todo项目"></a>5、todo项目</h1><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest</span><br></pre></td></tr></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/x1a0g/project/next/my-todo</span><br></pre></td></tr></table></figure><h1 id="6、api编写"><a href="#6、api编写" class="headerlink" title="6、api编写"></a>6、api编写</h1><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>**首先在app目录下新建一个文件夹叫<code>api</code> 的目录 然后文件格式如下 **</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── login</span><br><span class="line">│   └── route.<span class="property">ts</span><span class="comment">//这个名字不能修改</span></span><br><span class="line">└── user</span><br></pre></td></tr></table></figure><p><strong>get请求</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参get请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GET</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问号传参GET请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GET</span> = (<span class="params"><span class="attr">req</span>:<span class="title class_">NextRequest</span></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> searchParams = req.<span class="property">nextUrl</span>.<span class="property">searchParams</span></span><br><span class="line">    <span class="keyword">const</span> query = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;query&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;success.query=&quot;</span>+query,</span><br><span class="line">        <span class="attr">data</span>:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//post传递json</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">const</span> <span class="title function_">POST</span> = <span class="keyword">async</span> (<span class="params"><span class="attr">req</span>:<span class="title class_">NextRequest</span></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> req.<span class="title function_">json</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;success.&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;body&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码中使用</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Item</span>&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LoginInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> x = [&#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:<span class="number">20</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:<span class="number">30</span></span><br><span class="line">    &#125;]</span><br><span class="line">    <span class="keyword">const</span> [data,setData] = useState&lt;<span class="title class_">Item</span>[]&gt;([])</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&#x27;/api/login&#x27;</span>,&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(x)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resp</span>=&gt;</span>resp.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="title function_">setData</span>(res.<span class="property">data</span>))</span><br><span class="line">    &#125;,[]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;data.map(item=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>姓名：&#123;item.name&#125; 年龄：&#123;item.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LoginInfo</span></span><br></pre></td></tr></table></figure><h1 id="7、prisma框架"><a href="#7、prisma框架" class="headerlink" title="7、prisma框架"></a>7、prisma框架</h1><h2 id="依赖下载"><a href="#依赖下载" class="headerlink" title="依赖下载"></a>依赖下载</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prisma --save-dev</span><br></pre></td></tr></table></figure><h2 id="初始化数据源"><a href="#初始化数据源" class="headerlink" title="初始化数据源"></a>初始化数据源</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx prisma init --datasource-provider postgresql</span><br></pre></td></tr></table></figure><h2 id="建立数据库和对应的数据表"><a href="#建立数据库和对应的数据表" class="headerlink" title="建立数据库和对应的数据表"></a>建立数据库和对应的数据表</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">CREATE</span> <span class="variable constant_">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;User&quot;</span> (</span><br><span class="line">  id <span class="variable constant_">SERIAL</span> <span class="variable constant_">PRIMARY</span> <span class="variable constant_">KEY</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  name <span class="title function_">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  email <span class="title function_">VARCHAR</span>(<span class="number">255</span>) <span class="variable constant_">UNIQUE</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">CREATE</span> <span class="variable constant_">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;Post&quot;</span> (</span><br><span class="line">  id <span class="variable constant_">SERIAL</span> <span class="variable constant_">PRIMARY</span> <span class="variable constant_">KEY</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  title <span class="title function_">VARCHAR</span>(<span class="number">255</span>) <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  <span class="string">&quot;createdAt&quot;</span> <span class="variable constant_">TIMESTAMP</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span> <span class="variable constant_">DEFAULT</span> <span class="title function_">now</span>(),</span><br><span class="line">  content <span class="variable constant_">TEXT</span>,</span><br><span class="line">  published <span class="variable constant_">BOOLEAN</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span> <span class="variable constant_">DEFAULT</span> <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;authorId&quot;</span> <span class="variable constant_">INTEGER</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  <span class="variable constant_">FOREIGN</span> <span class="title function_">KEY</span> (<span class="string">&quot;authorId&quot;</span>) <span class="variable constant_">REFERENCES</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;User&quot;</span>(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">CREATE</span> <span class="variable constant_">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;Profile&quot;</span> (</span><br><span class="line">  id <span class="variable constant_">SERIAL</span> <span class="variable constant_">PRIMARY</span> <span class="variable constant_">KEY</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  bio <span class="variable constant_">TEXT</span>,</span><br><span class="line">  <span class="string">&quot;userId&quot;</span> <span class="variable constant_">INTEGER</span> <span class="variable constant_">UNIQUE</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  <span class="variable constant_">FOREIGN</span> <span class="title function_">KEY</span> (<span class="string">&quot;userId&quot;</span>) <span class="variable constant_">REFERENCES</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;User&quot;</span>(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="生成对应的数据库模型"><a href="#生成对应的数据库模型" class="headerlink" title="生成对应的数据库模型"></a>生成对应的数据库模型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx prisma db pull</span><br></pre></td></tr></table></figure><p>类似下方</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">generator client &#123;</span><br><span class="line">  provider = <span class="string">&quot;prisma-client-js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datasource db &#123;</span><br><span class="line">  provider = <span class="string">&quot;postgresql&quot;</span></span><br><span class="line">  url      = <span class="title function_">env</span>(<span class="string">&quot;DATABASE_URL&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model <span class="title class_">Post</span> &#123;</span><br><span class="line">  id        <span class="title class_">Int</span>      <span class="meta">@id</span> <span class="meta">@default</span>(<span class="title function_">autoincrement</span>())</span><br><span class="line">  title     <span class="title class_">String</span>   <span class="meta">@db</span>.<span class="title class_">VarChar</span>(<span class="number">255</span>)</span><br><span class="line">  createdAt <span class="title class_">DateTime</span> <span class="meta">@default</span>(<span class="title function_">now</span>()) <span class="meta">@db</span>.<span class="title class_">Timestamp</span>(<span class="number">6</span>)</span><br><span class="line">  content   <span class="title class_">String</span>?</span><br><span class="line">  published <span class="title class_">Boolean</span>  <span class="meta">@default</span>(<span class="literal">false</span>)</span><br><span class="line">  authorId  <span class="title class_">Int</span></span><br><span class="line">  <span class="title class_">User</span>      <span class="title class_">User</span>     <span class="meta">@relation</span>(<span class="attr">fields</span>: [authorId], <span class="attr">references</span>: [id], <span class="attr">onDelete</span>: <span class="title class_">NoAction</span>, <span class="attr">onUpdate</span>: <span class="title class_">NoAction</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model <span class="title class_">Profile</span> &#123;</span><br><span class="line">  id     <span class="title class_">Int</span>     <span class="meta">@id</span> <span class="meta">@default</span>(<span class="title function_">autoincrement</span>())</span><br><span class="line">  bio    <span class="title class_">String</span>?</span><br><span class="line">  userId <span class="title class_">Int</span>     <span class="meta">@unique</span></span><br><span class="line">  <span class="title class_">User</span>   <span class="title class_">User</span>    <span class="meta">@relation</span>(<span class="attr">fields</span>: [userId], <span class="attr">references</span>: [id], <span class="attr">onDelete</span>: <span class="title class_">NoAction</span>, <span class="attr">onUpdate</span>: <span class="title class_">NoAction</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model <span class="title class_">User</span> &#123;</span><br><span class="line">  id      <span class="title class_">Int</span>      <span class="meta">@id</span> <span class="meta">@default</span>(<span class="title function_">autoincrement</span>())</span><br><span class="line">  name    <span class="title class_">String</span>?  <span class="meta">@db</span>.<span class="title class_">VarChar</span>(<span class="number">255</span>)</span><br><span class="line">  email   <span class="title class_">String</span>   <span class="meta">@unique</span> <span class="meta">@db</span>.<span class="title class_">VarChar</span>(<span class="number">255</span>)</span><br><span class="line">  <span class="title class_">Post</span>    <span class="title class_">Post</span>[]</span><br><span class="line">  <span class="title class_">Profile</span> <span class="title class_">Profile</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="meta">@prisma</span>/client -D<span class="comment">//安装客户端库</span></span><br><span class="line"></span><br><span class="line">npx prisma generate<span class="comment">//生成客户端</span></span><br></pre></td></tr></table></figure><h2 id="编写crud"><a href="#编写crud" class="headerlink" title="编写crud"></a>编写crud</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PrismaClient</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@prisma/client&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next/server&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prisma = <span class="keyword">new</span> <span class="title class_">PrismaClient</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GET</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//findall</span></span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> prisma.<span class="property">user</span>.<span class="title function_">findMany</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>:users</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="保证循环异步操作结束再插入"><a href="#保证循环异步操作结束再插入" class="headerlink" title="保证循环异步操作结束再插入"></a>保证循环异步操作结束再插入</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、循环遍历封装对象信息</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">saveVideoInfo</span>: <span class="title class_">Array</span>&lt;<span class="title class_">VideoInfo</span>&gt; = []</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">retVideoinfo</span>:<span class="title class_">Array</span>&lt;<span class="title class_">VideoInfo</span>&gt; = []</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(videoList.<span class="title function_">map</span>(<span class="title function_">async</span>(item) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> rank = &#123;</span><br><span class="line">            <span class="attr">video_title</span>: item.<span class="property">title</span>,</span><br><span class="line">            <span class="attr">video_pic</span>: item.<span class="property">pic</span>,</span><br><span class="line">            <span class="attr">duration</span>: item.<span class="property">duration</span>,</span><br><span class="line">            <span class="attr">video_bvid</span>: item.<span class="property">bvid</span>,</span><br><span class="line">            <span class="attr">video_aid</span>: <span class="title class_">String</span>(item.<span class="property">aid</span>),</span><br><span class="line">            <span class="attr">video_type</span>: item.<span class="property">tname</span>,</span><br><span class="line">            <span class="attr">user_no</span>: item.<span class="property">owner</span>.<span class="property">mid</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2、判断当前数据是否已经在数据库中</span></span><br><span class="line">        <span class="keyword">const</span> rankCount = <span class="keyword">await</span> prisma.<span class="property">bili_rank</span>.<span class="title function_">count</span>(&#123;</span><br><span class="line">            <span class="attr">where</span>: &#123;</span><br><span class="line">                <span class="attr">video_aid</span>: &#123;</span><br><span class="line">                    <span class="attr">equals</span>: item.<span class="property">video_aid</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不在则可以插入</span></span><br><span class="line">        <span class="keyword">if</span> (rankCount == <span class="number">0</span>) &#123;</span><br><span class="line">            saveVideoInfo.<span class="title function_">push</span>(rank)</span><br><span class="line">        &#125;</span><br><span class="line">        retVideoinfo.<span class="title function_">push</span>(rank)</span><br><span class="line">    &#125;))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> batchSave = <span class="keyword">await</span> prisma.<span class="property">bili_rank</span>.<span class="title function_">createMany</span>(&#123;<span class="attr">data</span>:saveVideoInfo&#125;);</span><br></pre></td></tr></table></figure><h1 id="8、-express框架"><a href="#8、-express框架" class="headerlink" title="8、 express框架"></a>8、 express框架</h1><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -D</span><br></pre></td></tr></table></figure><h2 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(bodyparser.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">use</span>(bodyparser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//get</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="function">(<span class="params">req,resp</span>)=&gt;</span>&#123;</span><br><span class="line">    resp.<span class="title function_">json</span>(&#123;<span class="attr">id</span>:<span class="number">10</span>,<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//post</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="function">(<span class="params">req,resp</span>)=&gt;</span>&#123;</span><br><span class="line">    resp.<span class="title function_">json</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listen to 3000 port&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="9、tailwind"><a href="#9、tailwind" class="headerlink" title="9、tailwind"></a>9、tailwind</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Logo</span> <span class="keyword">from</span> <span class="string">&#x27;../logo.svg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&#x27; flex justify-between items-center h-20&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;Logo&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">className</span>=<span class="string">&#x27; w-10 h-10&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">&#x27; flex items-center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&#x27; bg-gray-800 text-blue-50 ml-8 px-4 py-2 rounded flex items-center&#x27;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="10、解决跨域问题"><a href="#10、解决跨域问题" class="headerlink" title="10、解决跨域问题"></a>10、解决跨域问题</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i http-proxy-middleware -D</span><br></pre></td></tr></table></figure><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><p><strong>src&#x2F;setupProxy.js</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const <span class="punctuation">&#123;</span> createProxyMiddleware <span class="punctuation">&#125;</span> = require(&#x27;http-proxy-middleware&#x27;);</span><br><span class="line">module.exports = function (app) <span class="punctuation">&#123;</span></span><br><span class="line">    app.use(</span><br><span class="line">        &#x27;/api&#x27;<span class="punctuation">,</span></span><br><span class="line">        createProxyMiddleware(<span class="punctuation">&#123;</span></span><br><span class="line">            target<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//localhost:3001/&#x27;,</span></span><br><span class="line">            changeOrigin<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            pathRewrite<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                &#x27;^/api&#x27;<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span>)</span><br><span class="line">    );</span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-asm</title>
      <link href="/2022/01/19/linux-asm/"/>
      <url>/2022/01/19/linux-asm/</url>
      
        <content type="html"><![CDATA[<h1 id="1、从一个c程序开始"><a href="#1、从一个c程序开始" class="headerlink" title="1、从一个c程序开始"></a>1、从一个c程序开始</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个c程序要编译成linux上可执行文件，需要经历4个步骤：</p><ul><li>预处理</li><li>编译</li><li>汇编</li><li>链接<br>下面分别从这四个方面去看一下每个过程中流程代码</li></ul><blockquote><p>预处理</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> __overflow (FILE *, <span class="type">int</span>);</span><br><span class="line"># <span class="number">902</span> <span class="string">&quot;/usr/include/stdio.h&quot;</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;hello.c&quot;</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3</span> <span class="string">&quot;hello.c&quot;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是把stdio这个库添加到了 hello.c 这个文件当中</p><blockquote><p>编译  编译过程就是对预处理完的文件进行一系列的词法分析，语法分析，语义分析及优化后生成相应的汇编代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.i -o hello.s</span><br></pre></td></tr></table></figure><p>这个就是全部的汇编代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">.file<span class="string">&quot;hello.c&quot;</span></span><br><span class="line">.text</span><br><span class="line">.section.rodata</span><br><span class="line">.LC0:</span><br><span class="line">.string<span class="string">&quot;hello world&quot;</span></span><br><span class="line">.text</span><br><span class="line">.globlmain</span><br><span class="line">.<span class="built_in">type</span>main, @<span class="keyword">function</span></span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">.cfi_startproc</span><br><span class="line">endbr64</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset 6, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register 6</span><br><span class="line">leaq.LC0(%rip), %rax</span><br><span class="line">movq%rax, %rdi</span><br><span class="line">movl<span class="variable">$0</span>, %eax</span><br><span class="line">call<span class="built_in">printf</span>@PLT</span><br><span class="line">movl<span class="variable">$0</span>, %eax</span><br><span class="line">popq%rbp</span><br><span class="line">.cfi_def_cfa 7, 8</span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">.sizemain, .-main</span><br><span class="line">.ident<span class="string">&quot;GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0&quot;</span></span><br><span class="line">.section.note.GNU-stack,<span class="string">&quot;&quot;</span>,@progbits</span><br><span class="line">.section.note.gnu.property,<span class="string">&quot;a&quot;</span></span><br><span class="line">.align 8</span><br><span class="line">.long1f - 0f</span><br><span class="line">.long4f - 1f</span><br><span class="line">.long5</span><br></pre></td></tr></table></figure><blockquote><p>汇编  汇编过程调用对汇编代码进行处理，生成处理器能识别的指令，保存在后缀为.o 的目标文件中。当程序由多个源代码文件构成时，每个文件都要先完成汇编工作，生成.o 目标 文件后，才能进入下一步的链接工作。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c hello.c -o hello.o</span><br></pre></td></tr></table></figure><p><strong>.o格式的文件是elf的可重定向文件格式</strong></p><blockquote><p>链接 将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。链接也分为静态链接和动态链接。静态链接是指在<strong>编译阶段</strong>直接把静态库加入到可执行文件中去，这样可执行 文件会比较大。动态链接则是指链接阶段仅仅只加入一些描述信息，而<strong>程序执行时</strong>再从系统中把相应动态库加载到内存中去</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello</span><br></pre></td></tr></table></figure><h1 id="2、Hello-world"><a href="#2、Hello-world" class="headerlink" title="2、Hello world"></a>2、Hello world</h1><h2 id="2-1、编码"><a href="#2-1、编码" class="headerlink" title="2.1、编码"></a>2.1、编码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    msg db &quot;Hello, world!&quot;, 0Ah ; 字符串常量，包括换行符</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov rax,1 ;系统调用号</span><br><span class="line"></span><br><span class="line">    mov rdi,1 ;1是标准输出</span><br><span class="line"></span><br><span class="line">    mov rsi,msg ;具体消息</span><br><span class="line"></span><br><span class="line">    mov rdx,14 ;消息长度</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,60   ;60是sys_exit</span><br><span class="line"></span><br><span class="line">    xor rdi,rdi ;exit 0</span><br><span class="line"></span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf64 foo.asm &amp;&amp; ld -o foo foo.o</span><br></pre></td></tr></table></figure><h2 id="2-2、代码解释"><a href="#2-2、代码解释" class="headerlink" title="2.2、代码解释"></a>2.2、代码解释</h2><p><strong>syscall</strong></p><blockquote><p>在linux中 syscall 是一种系统自带的函数，我们可以在语言中直接进行调用 比如 <code>sys_exit</code>  <code>sys_write</code>  <code>read</code> 等等  常见的系统调用表如下</p></blockquote><table><thead><tr><th>系统调用号</th><th>函数名</th><th>入口点</th><th>源码</th></tr></thead><tbody><tr><td>0</td><td>read</td><td>sys_read</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/read_write.c">fs&#x2F;read_write.c</a></td></tr><tr><td>1</td><td>write</td><td>sys_write</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/read_write.c">fs&#x2F;read_write.c</a></td></tr><tr><td>2</td><td>open</td><td>sys_open</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/open.c">fs&#x2F;open.c</a></td></tr><tr><td>3</td><td>close</td><td>sys_close</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/open.c">fs&#x2F;open.c</a></td></tr><tr><td>4</td><td>stat</td><td>sys_newstat</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/stat.c">fs&#x2F;stat.c</a></td></tr><tr><td>5</td><td>fstat</td><td>sys_newfstat</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/stat.c">fs&#x2F;stat.c</a></td></tr><tr><td>6</td><td>lstat</td><td>sys_newlstat</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/stat.c">fs&#x2F;stat.c</a></td></tr><tr><td>7</td><td>poll</td><td>sys_poll</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/select.c">fs&#x2F;select.c</a></td></tr><tr><td>8</td><td>lseek</td><td>sys_lseek</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/read_write.c">fs&#x2F;read_write.c</a></td></tr><tr><td>9</td><td>mmap</td><td>sys_mmap</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/sys_x86_64.c">arch&#x2F;x86&#x2F;kernel&#x2F;sys_x86_64.c</a></td></tr><tr><td>10</td><td>mprotect</td><td>sys_mprotect</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/mm/mprotect.c">mm&#x2F;mprotect.c</a></td></tr><tr><td>11</td><td>munmap</td><td>sys_munmap</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/mm/mmap.c">mm&#x2F;mmap.c</a></td></tr><tr><td>12</td><td>brk</td><td>sys_brk</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/mm/mmap.c">mm&#x2F;mmap.c</a></td></tr><tr><td>13</td><td>rt_sigaction</td><td>sys_rt_sigaction</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/kernel/signal.c">kernel&#x2F;signal.c</a></td></tr><tr><td>14</td><td>rt_sigprocmask</td><td>sys_rt_sigprocmask</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/kernel/signal.c">kernel&#x2F;signal.c</a></td></tr><tr><td>15</td><td>rt_sigreturn</td><td>stub_rt_sigreturn</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/signal.c">arch&#x2F;x86&#x2F;kernel&#x2F;signal.c</a></td></tr><tr><td>16</td><td>ioctl</td><td>sys_ioctl</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/ioctl.c">fs&#x2F;ioctl.c</a></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>我们在64位操作系统下，参数寄存器如下所示</strong></p><table><thead><tr><th>系统调用号</th><th>参数1</th><th>参数2</th><th>参数3</th><th>参数4</th><th>参数5</th><th>参数6</th><th>调用返回值</th></tr></thead><tbody><tr><td>rax</td><td>rdi</td><td>rsi</td><td>rdx</td><td>r10</td><td>r8</td><td>r9</td><td>rax</td></tr></tbody></table><p><strong>32位操作系统下，寄存器如下</strong></p><table><thead><tr><th>系统调用号</th><th>参数1</th><th>参数2</th><th>参数3</th><th>参数4</th><th>参数5</th><th>参数6</th><th>调用返回值</th></tr></thead><tbody><tr><td>eax</td><td>ebx</td><td>ecx</td><td>edx</td><td></td><td></td><td></td><td>eax</td></tr></tbody></table><p><strong>字符串长度计算</strong></p><p>在nasm中 $ 等于当前行开头的地址， <code>$$</code> 等于当前section的开头地址</p><h1 id="3、基本语法"><a href="#3、基本语法" class="headerlink" title="3、基本语法"></a>3、基本语法</h1><h2 id="3-1、寻址模式"><a href="#3-1、寻址模式" class="headerlink" title="3.1、寻址模式"></a>3.1、寻址模式</h2><p><strong>dd、dw、db的区别：</strong></p><ul><li>db代表的是字节类型变量  一个字节占用一个字节单元</li><li>dw定义字类型变量，一个字类型是两个字节单元</li><li>dd定义双字类型变量  一个双字类型是四个字节单元</li></ul><blockquote><p><strong>寄存器寻址 在此寻址模式下，寄存器包含操作数。 根据指令的不同，寄存器可能是第一个操作数、第二个操作数或两者。</strong></p></blockquote><p>8位寄存器：AH、AL，BH、BL、CH、CL、DH、DL</p><p>16位寄存器：AX、BX、CX、DX、SI、DI、BP、SP</p><p><strong>例子</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    msg db &quot;aaa&quot;</span><br><span class="line"></span><br><span class="line">    a db 50 ;变量a的值为10</span><br><span class="line"></span><br><span class="line">    b db 47 ;变量b的值为11</span><br><span class="line"></span><br><span class="line">    res db 0 ;相加结果</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">   global _start</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov al,[a]</span><br><span class="line"></span><br><span class="line">    add al,[b]</span><br><span class="line"></span><br><span class="line">    mov [res],al</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,1 ;系统调用号</span><br><span class="line"></span><br><span class="line">    mov rdi,1 ;1是标准输出</span><br><span class="line"></span><br><span class="line">    mov rsi,res ;具体消息  这个打印出来是 ascii码</span><br><span class="line"></span><br><span class="line">    mov rdx,8 ;消息长度</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,60   ;60是sys_exit</span><br><span class="line"></span><br><span class="line">    xor rdi,rdi ;exit 0</span><br><span class="line"></span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><blockquote><p>立即寻址  通常用来操作立即数  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,40H</span><br><span class="line"></span><br><span class="line">add al,57H</span><br></pre></td></tr></table></figure><blockquote><p>内存寻址  </p></blockquote><p><strong>直接内存偏移寻址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ax,ds:[2000H]</span><br></pre></td></tr></table></figure><ul><li>前缀ds表示该单元在数据段   然后在2000偏移的地方读一个字</li></ul><p>操作数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    arr db 9,8,7,6,5</span><br><span class="line"></span><br><span class="line">    ar2 dw 111,222,333</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov cl,arr[2];访问到7  db是一个字节单位  cl是一个8位寄存器</span><br><span class="line"></span><br><span class="line">    mov cl arr+2;不同的方式</span><br><span class="line"></span><br><span class="line">    mov cx ar2[2] ;访问到333 dw是一个字 两字节单位 所以用 cx是一个16位的寄存器</span><br><span class="line"></span><br><span class="line">    mov cx ar2+2</span><br></pre></td></tr></table></figure><p><strong>间接内存寻址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MY_TABLE TIMES 10 DW 0  ; 长度为10 的一个 字类型数组  16位</span><br><span class="line">MOV EBX, [MY_TABLE]     ; Effective Address of MY_TABLE in EBX</span><br><span class="line">MOV [EBX], 110          ; MY_TABLE[0] = 110</span><br><span class="line">ADD EBX, 2              ; EBX = EBX +2</span><br><span class="line">MOV [EBX], 123          ; MY_TABLE[1] = 123</span><br></pre></td></tr></table></figure><p><strong>常见的类型说明符</strong></p><table><thead><tr><th>类型说明符</th><th>寻址字节数</th><th></th></tr></thead><tbody><tr><td>BYTE</td><td>1</td><td></td></tr><tr><td>WORD</td><td>2</td><td></td></tr><tr><td>DWORD</td><td>4</td><td></td></tr><tr><td>QWORD</td><td>8</td><td></td></tr><tr><td>TBYTE</td><td>10</td><td></td></tr></tbody></table><p><strong>基于指针的寻址：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line">    str db &#x27;Hello, world!&#x27;,0</span><br><span class="line">    ptr dd str</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    mov eax, [ptr] ; 获取字符串首地址的值，即&#x27;H&#x27;</span><br><span class="line">    mov [ptr], al ; 将&#x27;H&#x27;存储到字符串首地址</span><br><span class="line">    mov eax, [ptr+1] ; 获取字符串首地址后一个字符的值，即&#x27;e&#x27;</span><br><span class="line">    mov [ptr+1], al ; 将&#x27;e&#x27;存储到字符串首地址后一个位置</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>基址加变址寻址：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line">    str db &#x27;Hello, world!&#x27;,0</span><br><span class="line">    bx dw str ; 设置基地址寄存器 bx 为字符串首地址</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    mov si, bx ; 设置偏移量寄存器 si 为 0</span><br><span class="line">    mov di, bx + 25 ; 设置偏移量寄存器 di 为 25</span><br><span class="line">    mov al, [si] ; 获取字符串首地址处的值，即&#x27;H&#x27;</span><br><span class="line">    mov [di], al ; 将&#x27;H&#x27;存储到字符串首地址后一个位置</span><br><span class="line">    inc si ; si 递增</span><br><span class="line">    dec di ; di 递减</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2、变量"><a href="#3-2、变量" class="headerlink" title="3.2、变量"></a>3.2、变量</h2><p>在汇编语言中，有五种分配空间的大小，他可以保留或初始化各种空间，通常称其为 &#x3D;&#x3D;<strong>define指令</strong>&#x3D;&#x3D;</p><table><thead><tr><th>指令</th><th>用途</th><th>存储空间</th></tr></thead><tbody><tr><td>DB</td><td>定义 Byte</td><td>分配1个字节</td></tr><tr><td>DW</td><td>定义 Word</td><td>&#x3D;&#x3D;分配&#x3D;&#x3D;2个字节</td></tr><tr><td>DD</td><td>定义 Doubleword</td><td>分配4个字节</td></tr><tr><td>DQ</td><td>定义 Quadword</td><td>分配8个字节</td></tr><tr><td>DT</td><td>定义十个字节</td><td>分配10个字节</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    a db &#x27;x&#x27;</span><br><span class="line"></span><br><span class="line">    b dw 12345</span><br><span class="line"></span><br><span class="line">    c dq 123456789</span><br><span class="line"></span><br><span class="line">    d dd 1.234</span><br><span class="line"></span><br><span class="line">    e dq 123.456</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov rax,1</span><br><span class="line"></span><br><span class="line">    mov rdi,1</span><br><span class="line"></span><br><span class="line">    mov rsi,a,</span><br><span class="line"></span><br><span class="line">    mov rdx,1</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,60</span><br><span class="line"></span><br><span class="line">    xor rdi,rdi</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3、常量"><a href="#3-3、常量" class="headerlink" title="3.3、常量"></a>3.3、常量</h2><blockquote><p>在汇编语言中 有三种定义常量的方式 </p><ul><li>EQU</li><li>%assign</li><li>%define</li></ul></blockquote><p><strong>EQU</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">STDOUT equ 1</span><br><span class="line"></span><br><span class="line">SYS_WRITE equ 1</span><br><span class="line"></span><br><span class="line">SYS_EXIT equ 60</span><br><span class="line"></span><br><span class="line">SYS_EXIT_AREA equ STDOUT*SYS_EXIT</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    msg db &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">    msglen equ $-msg</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,SYS_WRITE</span><br><span class="line"></span><br><span class="line">    mov rdi,STDOUT</span><br><span class="line"></span><br><span class="line">    mov rsi,msg</span><br><span class="line"></span><br><span class="line">    mov rdx,msglen</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,SYS_EXIT_AREA</span><br><span class="line"></span><br><span class="line">    xor rdi,rdi</span><br><span class="line"></span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p><strong>%assign指定通常用于表示数字常量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%assign TOTAL 10</span><br><span class="line"></span><br><span class="line">msg db &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">MOV EBX,USER_NAME</span><br></pre></td></tr></table></figure><p><strong>%define指令通常用于表示数字或者字符串常量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%define USER_NAME [ebp+4]</span><br><span class="line"></span><br><span class="line">msg db &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">MOV EBX,USER_NAME</span><br></pre></td></tr></table></figure><h2 id="3-4、算术指令"><a href="#3-4、算术指令" class="headerlink" title="3.4、算术指令"></a>3.4、算术指令</h2><p><strong>算术指令主要有以下四类</strong></p><ul><li>inc&#x2F;dec   寄存器或者单个操作数的加减</li><li>add&#x2F;sub  二进制数的加减</li><li>mul&#x2F;imul</li><li>div&#x2F;idiv</li></ul><h3 id="3-4-1、加减"><a href="#3-4-1、加减" class="headerlink" title="3.4.1、加减"></a>3.4.1、加减</h3><p><strong>inc&#x2F;dec 示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    count db 98</span><br><span class="line"></span><br><span class="line">    nexta db 5</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov rbx,count</span><br><span class="line"></span><br><span class="line">    dec byte [rbx]</span><br><span class="line">    inc byte [rbx]</span><br><span class="line">    ;或者 inc rbx 都是可以的</span><br></pre></td></tr></table></figure><p><strong>add&#x2F;sub示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov eax,10</span><br><span class="line">mov ebx,5</span><br><span class="line">sub eax,ebx</span><br><span class="line">add eax,ebx</span><br></pre></td></tr></table></figure><h3 id="3-4-2、乘除"><a href="#3-4-2、乘除" class="headerlink" title="3.4.2、乘除"></a>3.4.2、乘除</h3><p><strong>mul&#x2F;imul示例</strong></p><p><strong>imul和idiv用于处理有符号的数据</strong></p><table><thead><tr><th>序号</th><th>场景</th></tr></thead><tbody><tr><td>1</td><td><strong>当两个字节相乘时 −</strong><br><br>被乘数在AL寄存器中，乘数是内存中或另一个寄存器中的一个字节。 该产品在 AX 中。 乘积的高8位存放在AH中，低8位存放在AL中。<br><br><style>.sppemijzjvgp{}</style><img src="/2022/01/19/linux-asm/arithmetic1.jpg" class="sppemijzjvgp" alt="Arithmetic1"></td></tr><tr><td>2</td><td><strong>当两个单字值相乘时 −</strong><br><br>被乘数应该在AX寄存器中，乘数是内存或另一个寄存器中的一个字。 例如，对于像MUL DX这样的指令，您必须将乘数存储在DX中，将被乘数存储在AX中。<br><br>生成的结果是一个双字，需要两个寄存器。 高位（最左边）部分存储在 DX 中，低位（最右边）部分存储在 AX 中。<br><br><style>.mfgwdqngofvo{}</style><img src="/2022/01/19/linux-asm/arithmetic2.jpg" class="mfgwdqngofvo" alt="Arithmetic2"></td></tr><tr><td>3</td><td><strong>当两个双字值相乘时−</strong><br><br>当两个双字值相乘时，被乘数应位于 EAX 中，乘数是存储在内存或另一个寄存器中的双字值。 生成的乘积存储在 EDX:EAX 寄存器中，即高位 32 位存储在 EDX 寄存器中，低位 32 位存储在 EAX 寄存器中。<br><br><style>.dduxuekmxdeo{}</style><img src="/2022/01/19/linux-asm/arithmetic3.jpg" class="dduxuekmxdeo" alt="Arithmetic3"></td></tr></tbody></table><p>hvb-]&#96;&#96;&#96;z80<br>MOV AL, 10<br>MOV DL, 25<br>MUL DL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">**div/idiv示例**</span><br><span class="line"></span><br><span class="line">```z80</span><br><span class="line">MOV AL, byte 10</span><br><span class="line">MOV DL, byte 5</span><br><span class="line">div DL</span><br></pre></td></tr></table></figure><h2 id="4、逻辑指令"><a href="#4、逻辑指令" class="headerlink" title="4、逻辑指令"></a>4、逻辑指令</h2><table><thead><tr><th>序号</th><th>说明</th><th>格式</th><th></th></tr></thead><tbody><tr><td>1</td><td>AND</td><td>AND operand1, operand2</td><td></td></tr><tr><td>2</td><td>OR</td><td>OR operand1, operand2</td><td></td></tr><tr><td>3</td><td>XOR</td><td>XOR operand1, operand2</td><td></td></tr><tr><td>4</td><td>TEST</td><td>TEST operand1, operand2</td><td></td></tr><tr><td>5</td><td>NOT</td><td>NOT operand1</td><td></td></tr></tbody></table><p><strong>AND 按位与操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV DL, byte 58</span><br><span class="line">AND DL,0FH</span><br><span class="line">MOV CL,DL</span><br></pre></td></tr></table></figure><p>AND 运算可用于清除一位或多位。 例如，假设BL寄存器包含0011 1010。如果需要将高位清零，则与0FH进行AND运算。</p><p>那么结果就是 11 1010 &amp; 00 1111 就是 1010</p><p><strong>其他的也是和其他语言类似的作用 没有什么区别 无非就是  与、或 、非、异或</strong></p><h2 id="5、条件控制"><a href="#5、条件控制" class="headerlink" title="5、条件控制"></a>5、条件控制</h2><table><thead><tr><th>无条件跳转</th><th>jmp</th></tr></thead><tbody><tr><td><strong>条件跳转</strong></td><td>这是根据条件由一组跳转指令 j&lt;condition&gt; 执行的。 条件指令通过中断顺序流来转移控制，并通过更改 IP 中的偏移值来实现。</td></tr></tbody></table><p><strong>CMP指令：用于比较两个操作数是否相等，一般用在循环条件控制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">mov ebx,1</span><br><span class="line">cmp ebx,1;如果 ebx==1 执行addfunc  否则向下执行</span><br><span class="line">jne AddFunc</span><br><span class="line">mov ebx,30</span><br><span class="line">jmp end</span><br><span class="line"></span><br><span class="line">AddFunc:</span><br><span class="line">add ebx,9</span><br><span class="line">jmp end</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>求两个数的最大值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line"></span><br><span class="line">section .data</span><br><span class="line">n1 dd &#x27;30&#x27;</span><br><span class="line">n2 dd &#x27;40&#x27;</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">mov ebx,[n1]</span><br><span class="line">mov ecx,[n2]</span><br><span class="line">cmp ebx,ecx</span><br><span class="line">jge Max</span><br><span class="line">mov edx,ecx</span><br><span class="line">jmp end</span><br><span class="line"></span><br><span class="line">Max:</span><br><span class="line">mov edx,ebx</span><br><span class="line">jmp end</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
