<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>unidbg 实战某客nsign</title>
      <link href="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/"/>
      <url>/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境</p></blockquote><ul><li>frida16去特征版  </li><li>java8</li><li>unidbg</li></ul><h2 id="一-抓包"><a href="#一-抓包" class="headerlink" title="一. 抓包"></a>一. 抓包</h2><p>抓包使用小黄鸟， 配置相关证书，配置ssl unpining</p><style>.kyymnehixirf{zoom:50%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_FVOQ0hi3et.png" class="kyymnehixirf" alt="Obsidian_FVOQ0hi3et"><p>lsposed中启动即可。</p><blockquote><p>抓包结果如下,接口请求头中需要添加nsign进行验签</p></blockquote><style>.cwwvtfntlcur{zoom:80%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_Qvu12zTLhP.png" class="cwwvtfntlcur" alt="Obsidian_Qvu12zTLhP"><h2 id="二-frida分析"><a href="#二-frida分析" class="headerlink" title="二. frida分析"></a>二. frida分析</h2><h3 id="1-jadx寻找入口点"><a href="#1-jadx寻找入口点" class="headerlink" title="1. jadx寻找入口点"></a>1. jadx寻找入口点</h3><p><strong>在jadx载入这个apk后，就需要找到sign生成的位置，通常来说，从一个正向开发的角度来讲，如果我在绝大多数的api都需要添加一个sign校验，那么一个一个加显然是费时费力的，所以如果我是开发者，通常来说会使用aop的形式或者定义一个interceptor，在过滤器filter之后，controller之前定义去实现这个功能。</strong></p><blockquote><p>故 搜索一下interpector</p></blockquote><style>.cfprbjucldgr{zoom:60%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_xQyQ2sDAAI.png" class="cfprbjucldgr" alt="Obsidian_xQyQ2sDAAI"><p>找到关键位置，之后进入找到sign在请求头中添加nsign的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c = SignUtil.c(path, c2, b2, uuid);</span><br><span class="line">newBuilder2.add(<span class="string">&quot;nsign&quot;</span>, c);</span><br><span class="line"><span class="type">UserProfile</span> <span class="variable">userProfile</span> <span class="operator">=</span> UserProfileProtocol.getUserProfile();</span><br></pre></td></tr></table></figure><p>跟进去找到nsign生成方法，是一个native方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">getSign</span><span class="params">(String str, String str2, Map&lt;String, <span class="type">byte</span>[]&gt; map, String str3, <span class="type">int</span> i)</span>;</span><br></pre></td></tr></table></figure><p>位置在libsignxxx.so  这东西定位一般搜一下System.loadLibrary 就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.loadLibrary(<span class="string">&quot;signxxxx&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-frida-hook"><a href="#2-frida-hook" class="headerlink" title="2. frida hook"></a>2. frida hook</h3><blockquote><p>hook  getSign方法,脚本如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest1</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">SignUtil</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.xxx.xxx.sign.SignUtil&quot;</span>);  </span><br><span class="line">    <span class="title class_">SignUtil</span>[<span class="string">&quot;getSign&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, str2, map, str3, i</span>) &#123;  </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Gson</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.google.gson.Gson&#x27;</span>).$new();  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;map -&gt; &quot;</span> + <span class="title class_">Gson</span>.<span class="title function_">toJsonTree</span>(map).<span class="title function_">getAsJsonObject</span>());  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignUtil.getSign is called: str=<span class="subst">$&#123;str&#125;</span>, str2=<span class="subst">$&#123;str2&#125;</span>, map=<span class="subst">$&#123;map&#125;</span>, str3=<span class="subst">$&#123;str3&#125;</span>, i=<span class="subst">$&#123;i&#125;</span>`</span>);  </span><br><span class="line">        <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;getSign&quot;</span>](str, str2, map, str3, i);  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SignUtil.getSign result=<span class="subst">$&#123;result&#125;</span>`</span>);  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------------------------------&#x27;</span>);  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;  </span><br><span class="line">        <span class="title function_">hookTest1</span>();  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p>结果如下:</p><style>.lhckoguiukfc{zoom:60%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_t19JB3I1oR.png" class="lhckoguiukfc" alt="Obsidian_t19JB3I1oR"><p>让gpt把map参数的值转换一下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;app&quot;: &quot;xxxxxx&quot;,</span><br><span class="line">  &quot;from&quot;: &quot;mobile&quot;,</span><br><span class="line">  &quot;pm&quot;: &quot;b276&quot;,</span><br><span class="line">  &quot;city_id&quot;: &quot;14&quot;,</span><br><span class="line">  ...</span><br><span class="line">  &quot;cid&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ida分析"><a href="#3-ida分析" class="headerlink" title="3. ida分析"></a>3. ida分析</h3><blockquote><p>载入ida可以在导出表中发现几个函数，就是此次unidbg调用的目标</p></blockquote><style>.dejtcuhewscy{zoom:60%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/Obsidian_8j99Ka6CrF.png" class="dejtcuhewscy" alt="Obsidian_8j99Ka6CrF"><h3 id="4-调用"><a href="#4-调用" class="headerlink" title="4. 调用"></a>4. 调用</h3><blockquote><p>通过unidbg正常补环境调用成功</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignUtil</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SignUtil</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.emulator = AndroidEmulatorBuilder.for64Bit().setProcessName(<span class="string">&quot;com.xxx.xxx.app&quot;</span>).addBackendFactory(<span class="keyword">new</span> <span class="title class_">DynarmicFactory</span>(<span class="literal">false</span>)).build();  </span><br><span class="line">        <span class="built_in">this</span>.vm = emulator.createDalvikVM();  </span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);  </span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();  </span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));  </span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);  </span><br><span class="line">        <span class="comment">//加载so文件  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;file\\libsign.so&quot;</span>;  </span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dalvikModule</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="literal">true</span>);  </span><br><span class="line">        dalvikModule.callJNI_OnLoad(emulator);  </span><br><span class="line">        log.info(<span class="string">&quot;=============load &#123;&#125; 成功&quot;</span>, path);  </span><br><span class="line">        <span class="keyword">module</span> = dalvikModule.getModule();  </span><br><span class="line">  </span><br><span class="line">        log.info(<span class="string">&quot;===============创建虚拟机成功&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">jsonToMap</span><span class="params">(String json)</span> &#123;  </span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();  </span><br><span class="line">        <span class="comment">// 使用 TypeToken 获取 Map 的类型  </span></span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;  </span><br><span class="line">        &#125;.getType());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//private static native String getSign(String str, String str2, Map&lt;String, byte[]&gt; map, String str3, int i);  </span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSign</span><span class="params">(String str, String str2, Map&lt;String, <span class="type">byte</span>[]&gt; map, String str3, <span class="type">int</span> i)</span> &#123;  </span><br><span class="line">        List&lt;Object&gt; obj = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">        DvmObject&lt;?&gt; dvmObject = vm.resolveClass(<span class="string">&quot;com.x1a0g.xxx&quot;</span>).newObject(<span class="literal">null</span>);  </span><br><span class="line">        <span class="comment">//调用jni函数的时候通常前面加两个参数  JniEnv* a,jclass b,真实的参数  </span></span><br><span class="line">        <span class="type">Pointer</span> <span class="variable">jniEnv</span> <span class="operator">=</span> vm.getJNIEnv();  </span><br><span class="line">        obj.add(jniEnv);  </span><br><span class="line">        obj.add(vm.addLocalObject(dvmObject));<span class="comment">//瞎几把传一个就行  </span></span><br><span class="line">        obj.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, str)));  </span><br><span class="line">        obj.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, str2)));  </span><br><span class="line">        obj.add(vm.addLocalObject(ProxyDvmObject.createObject(vm, map)));  </span><br><span class="line">        obj.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, str3)));  </span><br><span class="line">        obj.add(i);  </span><br><span class="line">        <span class="type">Number</span> <span class="variable">pointer</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x18F0</span>, obj.toArray());<span class="comment">//0x18F0在ida的导出表里面可以看到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取指针位置的值</span></span><br><span class="line">        DvmObject&lt;String&gt; object = vm.getObject(pointer.intValue());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object.getValue(); </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">callIntMethod</span><span class="params">(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;java/util/HashMap-&gt;size()I&quot;</span>.equals(signature)) &#123;  </span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">value</span> <span class="operator">=</span> (HashMap) dvmObject.getValue();  </span><br><span class="line">            <span class="keyword">return</span> value.size();  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callIntMethod(vm, dvmObject, signature, varArg);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> DvmObject&lt;?&gt; callObjectMethod(BaseVM vm, DvmObject&lt;?&gt; dvmObject, String signature, VarArg varArg) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;java/util/HashMap-&gt;keySet()Ljava/util/Set;&quot;</span>.equals(signature)) &#123;  </span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">res</span> <span class="operator">=</span> (HashMap) dvmObject.getValue();  </span><br><span class="line">            <span class="keyword">return</span> ProxyDvmObject.createObject(vm,res.keySet());  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;java/util/Set-&gt;toArray()[Ljava/lang/Object;&quot;</span>.equals(signature)) &#123;  </span><br><span class="line">            <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> (Set) dvmObject.getValue();  </span><br><span class="line">            <span class="keyword">return</span> ProxyDvmObject.createObject(vm,set.toArray());  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;java/util/HashMap-&gt;get(Ljava/lang/Object;)Ljava/lang/Object;&quot;</span>.equals(signature)) &#123;  </span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> (HashMap) dvmObject.getValue();  </span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> varArg.getObjectArg(<span class="number">0</span>).getValue();  </span><br><span class="line">            <span class="keyword">return</span> ProxyDvmObject.createObject(vm,map.get(object));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.callObjectMethod(vm, dvmObject, signature, varArg);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">SignUtil</span> <span class="variable">signUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignUtil</span>();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">fc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> + </span><br><span class="line">                <span class="string">&quot;  \&quot;city_id\&quot;: \&quot;14\&quot;,\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;  \&quot;cid\&quot;: []\n&quot;</span> +  </span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;aaaaaaa&quot;</span>;  </span><br><span class="line">        Map&lt;String, <span class="type">byte</span>[]&gt; mm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        Map&lt;String, Object&gt; json = jsonToMap(fc);  </span><br><span class="line">        json.forEach((k, v) -&gt; mm.put(k.toString(), v.toString().getBytes()));  </span><br><span class="line">        <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ccc-ddd-4c75-555-fff&quot;</span>;  </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> signUtil.getSign(str, str2, mm, str3, i);  </span><br><span class="line">        System.out.println(sign);  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><style>.gdhxrpqyqoxw{zoom:60%;}</style><img src="/2025/01/19/unidbg-%E5%AE%9E%E6%88%98%E6%9F%90%E5%AE%A2nsign/idea64_afAS2Ccglc.png" class="gdhxrpqyqoxw" alt="idea64_afAS2Ccglc">]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next-js AllInOne</title>
      <link href="/2023/01/30/next-js-AllInOne/"/>
      <url>/2023/01/30/next-js-AllInOne/</url>
      
        <content type="html"><![CDATA[<h1 id="1、创建一个nextjs项目"><a href="#1、创建一个nextjs项目" class="headerlink" title="1、创建一个nextjs项目"></a>1、创建一个nextjs项目</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app nextjs-blog --use-npm --example <span class="string">&quot;https://github.com/vercel/next-learn-starter/tree/master/learn-starter&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2、路由"><a href="#2、路由" class="headerlink" title="2、路由"></a>2、路由</h1><p>如果设置对应的路由需要建立对应的页面 例如</p><ul><li>url为<code>/posts/first-posts</code> 那么就需要建立如下文件 在 <code>pages/posts/first-posts.js</code></li><li><code>pages/index.js</code> 的路由地址是 <code>/</code></li></ul><p><strong>使用Link完成页面的跳转</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Link from &quot;next/link&quot;;</span><br><span class="line"></span><br><span class="line">export default function FirstPost()&#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">            &lt;Link href=&quot;/&quot;&gt;back home&lt;/Link&gt;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意Link跳转还是在同一个Next app中进行跳转 不是新页面的跳转</strong></p><h1 id="3、常用组件"><a href="#3、常用组件" class="headerlink" title="3、常用组件"></a>3、常用组件</h1><h2 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Head from &#x27;next/head&#x27;;</span><br><span class="line"></span><br><span class="line">&lt;Head&gt;</span><br><span class="line">  &lt;title&gt;First&lt;/title&gt;</span><br><span class="line">&lt;/Head&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="延迟加载和css使用"><a href="#延迟加载和css使用" class="headerlink" title="延迟加载和css使用"></a>延迟加载和css使用</h2><blockquote><p>layout.js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import styles from &#x27;./layout.module.css&#x27;</span><br><span class="line">export default function Layout(&#123;children&#125;)&#123;</span><br><span class="line">    return &lt;div className=&#123;styles.container&#125;&gt;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>layout.mudel.css</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">36rem</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3rem</span> auto <span class="number">6rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><blockquote><p>使用延迟加载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import Link from &#x27;next/link&#x27;;</span><br><span class="line">import Head from &#x27;next/head&#x27;;</span><br><span class="line">import Layout from &#x27;../../components/layout&#x27;;</span><br><span class="line">export default function FirstPost() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Layout&gt;</span><br><span class="line">    &lt;Head&gt;</span><br><span class="line">      &lt;title&gt;First&lt;/title&gt;</span><br><span class="line">    &lt;/Head&gt;</span><br><span class="line">      &lt;h1&gt;First Post&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;</span><br><span class="line">        &lt;Link href=&quot;/&quot;&gt;Back to home&lt;/Link&gt;</span><br><span class="line">      &lt;/h2&gt;</span><br><span class="line">      &lt;/Layout&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import styles from &#x27;./layout.module.css&#x27;</span><br><span class="line">export default function Layout(&#123;children&#125;)&#123;</span><br><span class="line">    return &lt;div className=&#123;styles.container&#125;&gt;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装-tailwindcss"><a href="#安装-tailwindcss" class="headerlink" title="安装 tailwindcss"></a>安装 tailwindcss</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install tailwindcss postcss-preset-env postcss-flexbugs-fixes</span><br></pre></td></tr></table></figure><p>根目录创建 <code>postcss.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#x27;tailwindcss&#x27;,</span><br><span class="line">    &#x27;postcss-flexbugs-fixes&#x27;,</span><br><span class="line">    [</span><br><span class="line">      &#x27;postcss-preset-env&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        autoprefixer: &#123;</span><br><span class="line">          flexbox: &#x27;no-2009&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        stage: 3,</span><br><span class="line">        features: &#123;</span><br><span class="line">          &#x27;custom-properties&#x27;: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&quot;use client&quot;</span><br><span class="line">import Image from &quot;next/image&quot;;</span><br><span class="line">import styles from &quot;./page.module.css&quot;;</span><br><span class="line">import &#123; useState &#125; from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">export default function Home() &#123;</span><br><span class="line">  let data = &quot;aaaa&quot;</span><br><span class="line"></span><br><span class="line">  const list = [</span><br><span class="line">    &#123;id:1,name:&quot;小郝&quot;&#125;,</span><br><span class="line">    &#123;id:2,name:&quot;小张&quot;&#125;,</span><br><span class="line">    &#123;id:3,name:&quot;小李&quot;&#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  let [dc,setDc] = useState(&quot;我是你好&quot;);</span><br><span class="line"></span><br><span class="line">  const pDontext = list.map(item=&gt;&#123;</span><br><span class="line">    return &lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/li&gt;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  let flag = true</span><br><span class="line">  let divContent = null</span><br><span class="line">  if(flag)&#123;</span><br><span class="line">    divContent = &lt;div&gt;我是div我是flag为真&lt;/div&gt;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    divContent =  &lt;p&gt;我是p标签flag为假&lt;/p&gt;</span><br><span class="line">    // setDc(&quot;我很不好&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">        &#123;/* &lt;h1&gt;todo list&lt;/h1&gt; */&#125;</span><br><span class="line">        &lt;ul&gt;&#123;pDontext&#125;&lt;/ul&gt;</span><br><span class="line">        &lt;div&gt;&#123;divContent&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;dc&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a>父子组件传值</h2><p><strong>prop传值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;use client&quot;</span><br><span class="line"></span><br><span class="line">function Artcire(prop:any) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;prop.title&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;prop.content&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function Home() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题1&quot; content=&quot;内容1&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题2&quot; content=&quot;内容2&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题3&quot; content=&quot;内容3&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结构表达式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;use client&quot;</span><br><span class="line"></span><br><span class="line">function Artcire(&#123;title,content&#125;) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;content&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function Home() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题1&quot; content=&quot;内容1&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题2&quot; content=&quot;内容2&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">      &lt;Artcire title=&quot;标题3&quot; content=&quot;内容3&quot;&gt;&lt;/Artcire&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>常用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&quot;use client&quot;</span><br><span class="line">function Artcire(&#123;title,detail&#125;:any) &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;Detail &#123;...detail&#125;/&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">function Detail(&#123;cons,active&#125;:any)&#123;</span><br><span class="line">  return(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;h3&gt;&#123;cons&#125;&lt;/h3&gt;</span><br><span class="line">      &lt;h4&gt;&#123;active?&#x27;显示&#x27;:&#x27;隐藏&#x27;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function Home() &#123;</span><br><span class="line"></span><br><span class="line">  const detailData = &#123;</span><br><span class="line">    title:&#x27;文章标题&#x27;,</span><br><span class="line">    detail:&#123;</span><br><span class="line">      cons:&#x27;我是具体的内容&#x27;,</span><br><span class="line">      active:false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Artcire &#123;...detailData&#125;&gt;&lt;/Artcire&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import logo from &#x27;./logo.svg&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line"></span><br><span class="line">function Detail(&#123;children&#125;)&#123;</span><br><span class="line">  return(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">function App() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">    &lt;button&gt;annq&lt;/button&gt;</span><br><span class="line">    &lt;Detail&gt;</span><br><span class="line">      &lt;li&gt;13&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;33&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;23&lt;/li&gt;</span><br><span class="line">    &lt;/Detail&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>子组件向父组件传值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import logo from &#x27;./logo.svg&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line">import &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Detail(&#123;children,onActiv&#125;)&#123;</span><br><span class="line"></span><br><span class="line">  let [sf,setSf] = useState(true)</span><br><span class="line"></span><br><span class="line">  function cli()&#123;</span><br><span class="line">    setSf(!sf)</span><br><span class="line">    onActiv(sf)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return(</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;&#123;children&#125;&lt;/div&gt;</span><br><span class="line">      &lt;button onClick=&#123;cli&#125;&gt;test&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line">  function handActiv(stf)&#123;</span><br><span class="line">    console.log(stf)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">    &lt;button onClick=&#123;handClick&#125;&gt;annq&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;&#123;state?&#x27;展示&#x27;:&#x27;隐藏&#x27;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;Detail onActiv=&#123;handActiv&#125;&gt;</span><br><span class="line">      &lt;li&gt;13&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;33&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;23&lt;/li&gt;</span><br><span class="line">    &lt;/Detail&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、hook"><a href="#4、hook" class="headerlink" title="4、hook"></a>4、hook</h1><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import logo from &#x27;./logo.svg&#x27;;</span><br><span class="line">import &#x27;./App.css&#x27;;</span><br><span class="line">import &#123; useReducer &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function App() &#123;</span><br><span class="line"></span><br><span class="line">  function stateReducer(state,action)&#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">      case &quot;incr&quot;:</span><br><span class="line">        return state+1</span><br><span class="line">      case &quot;decr&quot;:</span><br><span class="line">        return state-1</span><br><span class="line">      default:</span><br><span class="line">        return state=0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  let [state,dispacth] = useReducer(stateReducer,0)</span><br><span class="line"></span><br><span class="line">  const handleAdd = ()=&gt; dispacth(&#123;type:&#x27;incr&#x27;&#125;)</span><br><span class="line">  const handleDecr = ()=&gt; dispacth(&#123;type:&#x27;decr&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleAdd&#125;&gt;+&lt;/button&gt;</span><br><span class="line">      &#123;state&#125;</span><br><span class="line">      &lt;button onClick=&#123;handleDecr&#125;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><h1 id="5、todo项目"><a href="#5、todo项目" class="headerlink" title="5、todo项目"></a>5、todo项目</h1><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-next-app@latest</span><br></pre></td></tr></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/x1a0g/project/next/my-todo</span><br></pre></td></tr></table></figure><h1 id="6、api编写"><a href="#6、api编写" class="headerlink" title="6、api编写"></a>6、api编写</h1><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>**首先在app目录下新建一个文件夹叫<code>api</code> 的目录 然后文件格式如下 **</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── login</span><br><span class="line">│   └── route.<span class="property">ts</span><span class="comment">//这个名字不能修改</span></span><br><span class="line">└── user</span><br></pre></td></tr></table></figure><p><strong>get请求</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参get请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GET</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//问号传参GET请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GET</span> = (<span class="params"><span class="attr">req</span>:<span class="title class_">NextRequest</span></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> searchParams = req.<span class="property">nextUrl</span>.<span class="property">searchParams</span></span><br><span class="line">    <span class="keyword">const</span> query = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;query&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;success.query=&quot;</span>+query,</span><br><span class="line">        <span class="attr">data</span>:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>post请求</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//post传递json</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">const</span> <span class="title function_">POST</span> = <span class="keyword">async</span> (<span class="params"><span class="attr">req</span>:<span class="title class_">NextRequest</span></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> req.<span class="title function_">json</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&quot;success.&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;body&#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码中使用</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Item</span>&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LoginInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> x = [&#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:<span class="number">20</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>:<span class="number">30</span></span><br><span class="line">    &#125;]</span><br><span class="line">    <span class="keyword">const</span> [data,setData] = useState&lt;<span class="title class_">Item</span>[]&gt;([])</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">fetch</span>(<span class="string">&#x27;/api/login&#x27;</span>,&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(x)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">resp</span>=&gt;</span>resp.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="title function_">setData</span>(res.<span class="property">data</span>))</span><br><span class="line">    &#125;,[]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;data.map(item=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>姓名：&#123;item.name&#125; 年龄：&#123;item.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LoginInfo</span></span><br></pre></td></tr></table></figure><h1 id="7、prisma框架"><a href="#7、prisma框架" class="headerlink" title="7、prisma框架"></a>7、prisma框架</h1><h2 id="依赖下载"><a href="#依赖下载" class="headerlink" title="依赖下载"></a>依赖下载</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prisma --save-dev</span><br></pre></td></tr></table></figure><h2 id="初始化数据源"><a href="#初始化数据源" class="headerlink" title="初始化数据源"></a>初始化数据源</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx prisma init --datasource-provider postgresql</span><br></pre></td></tr></table></figure><h2 id="建立数据库和对应的数据表"><a href="#建立数据库和对应的数据表" class="headerlink" title="建立数据库和对应的数据表"></a>建立数据库和对应的数据表</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">CREATE</span> <span class="variable constant_">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;User&quot;</span> (</span><br><span class="line">  id <span class="variable constant_">SERIAL</span> <span class="variable constant_">PRIMARY</span> <span class="variable constant_">KEY</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  name <span class="title function_">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  email <span class="title function_">VARCHAR</span>(<span class="number">255</span>) <span class="variable constant_">UNIQUE</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">CREATE</span> <span class="variable constant_">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;Post&quot;</span> (</span><br><span class="line">  id <span class="variable constant_">SERIAL</span> <span class="variable constant_">PRIMARY</span> <span class="variable constant_">KEY</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  title <span class="title function_">VARCHAR</span>(<span class="number">255</span>) <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  <span class="string">&quot;createdAt&quot;</span> <span class="variable constant_">TIMESTAMP</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span> <span class="variable constant_">DEFAULT</span> <span class="title function_">now</span>(),</span><br><span class="line">  content <span class="variable constant_">TEXT</span>,</span><br><span class="line">  published <span class="variable constant_">BOOLEAN</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span> <span class="variable constant_">DEFAULT</span> <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;authorId&quot;</span> <span class="variable constant_">INTEGER</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  <span class="variable constant_">FOREIGN</span> <span class="title function_">KEY</span> (<span class="string">&quot;authorId&quot;</span>) <span class="variable constant_">REFERENCES</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;User&quot;</span>(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">CREATE</span> <span class="variable constant_">TABLE</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;Profile&quot;</span> (</span><br><span class="line">  id <span class="variable constant_">SERIAL</span> <span class="variable constant_">PRIMARY</span> <span class="variable constant_">KEY</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  bio <span class="variable constant_">TEXT</span>,</span><br><span class="line">  <span class="string">&quot;userId&quot;</span> <span class="variable constant_">INTEGER</span> <span class="variable constant_">UNIQUE</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>,</span><br><span class="line">  <span class="variable constant_">FOREIGN</span> <span class="title function_">KEY</span> (<span class="string">&quot;userId&quot;</span>) <span class="variable constant_">REFERENCES</span> <span class="string">&quot;public&quot;</span>.<span class="string">&quot;User&quot;</span>(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="生成对应的数据库模型"><a href="#生成对应的数据库模型" class="headerlink" title="生成对应的数据库模型"></a>生成对应的数据库模型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx prisma db pull</span><br></pre></td></tr></table></figure><p>类似下方</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">generator client &#123;</span><br><span class="line">  provider = <span class="string">&quot;prisma-client-js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">datasource db &#123;</span><br><span class="line">  provider = <span class="string">&quot;postgresql&quot;</span></span><br><span class="line">  url      = <span class="title function_">env</span>(<span class="string">&quot;DATABASE_URL&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model <span class="title class_">Post</span> &#123;</span><br><span class="line">  id        <span class="title class_">Int</span>      <span class="meta">@id</span> <span class="meta">@default</span>(<span class="title function_">autoincrement</span>())</span><br><span class="line">  title     <span class="title class_">String</span>   <span class="meta">@db</span>.<span class="title class_">VarChar</span>(<span class="number">255</span>)</span><br><span class="line">  createdAt <span class="title class_">DateTime</span> <span class="meta">@default</span>(<span class="title function_">now</span>()) <span class="meta">@db</span>.<span class="title class_">Timestamp</span>(<span class="number">6</span>)</span><br><span class="line">  content   <span class="title class_">String</span>?</span><br><span class="line">  published <span class="title class_">Boolean</span>  <span class="meta">@default</span>(<span class="literal">false</span>)</span><br><span class="line">  authorId  <span class="title class_">Int</span></span><br><span class="line">  <span class="title class_">User</span>      <span class="title class_">User</span>     <span class="meta">@relation</span>(<span class="attr">fields</span>: [authorId], <span class="attr">references</span>: [id], <span class="attr">onDelete</span>: <span class="title class_">NoAction</span>, <span class="attr">onUpdate</span>: <span class="title class_">NoAction</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model <span class="title class_">Profile</span> &#123;</span><br><span class="line">  id     <span class="title class_">Int</span>     <span class="meta">@id</span> <span class="meta">@default</span>(<span class="title function_">autoincrement</span>())</span><br><span class="line">  bio    <span class="title class_">String</span>?</span><br><span class="line">  userId <span class="title class_">Int</span>     <span class="meta">@unique</span></span><br><span class="line">  <span class="title class_">User</span>   <span class="title class_">User</span>    <span class="meta">@relation</span>(<span class="attr">fields</span>: [userId], <span class="attr">references</span>: [id], <span class="attr">onDelete</span>: <span class="title class_">NoAction</span>, <span class="attr">onUpdate</span>: <span class="title class_">NoAction</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model <span class="title class_">User</span> &#123;</span><br><span class="line">  id      <span class="title class_">Int</span>      <span class="meta">@id</span> <span class="meta">@default</span>(<span class="title function_">autoincrement</span>())</span><br><span class="line">  name    <span class="title class_">String</span>?  <span class="meta">@db</span>.<span class="title class_">VarChar</span>(<span class="number">255</span>)</span><br><span class="line">  email   <span class="title class_">String</span>   <span class="meta">@unique</span> <span class="meta">@db</span>.<span class="title class_">VarChar</span>(<span class="number">255</span>)</span><br><span class="line">  <span class="title class_">Post</span>    <span class="title class_">Post</span>[]</span><br><span class="line">  <span class="title class_">Profile</span> <span class="title class_">Profile</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="meta">@prisma</span>/client -D<span class="comment">//安装客户端库</span></span><br><span class="line"></span><br><span class="line">npx prisma generate<span class="comment">//生成客户端</span></span><br></pre></td></tr></table></figure><h2 id="编写crud"><a href="#编写crud" class="headerlink" title="编写crud"></a>编写crud</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">PrismaClient</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@prisma/client&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NextResponse</span> &#125; <span class="keyword">from</span> <span class="string">&quot;next/server&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prisma = <span class="keyword">new</span> <span class="title class_">PrismaClient</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">GET</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="comment">//findall</span></span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> prisma.<span class="property">user</span>.<span class="title function_">findMany</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>:users</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="保证循环异步操作结束再插入"><a href="#保证循环异步操作结束再插入" class="headerlink" title="保证循环异步操作结束再插入"></a>保证循环异步操作结束再插入</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、循环遍历封装对象信息</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">saveVideoInfo</span>: <span class="title class_">Array</span>&lt;<span class="title class_">VideoInfo</span>&gt; = []</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">retVideoinfo</span>:<span class="title class_">Array</span>&lt;<span class="title class_">VideoInfo</span>&gt; = []</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(videoList.<span class="title function_">map</span>(<span class="title function_">async</span>(item) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> rank = &#123;</span><br><span class="line">            <span class="attr">video_title</span>: item.<span class="property">title</span>,</span><br><span class="line">            <span class="attr">video_pic</span>: item.<span class="property">pic</span>,</span><br><span class="line">            <span class="attr">duration</span>: item.<span class="property">duration</span>,</span><br><span class="line">            <span class="attr">video_bvid</span>: item.<span class="property">bvid</span>,</span><br><span class="line">            <span class="attr">video_aid</span>: <span class="title class_">String</span>(item.<span class="property">aid</span>),</span><br><span class="line">            <span class="attr">video_type</span>: item.<span class="property">tname</span>,</span><br><span class="line">            <span class="attr">user_no</span>: item.<span class="property">owner</span>.<span class="property">mid</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2、判断当前数据是否已经在数据库中</span></span><br><span class="line">        <span class="keyword">const</span> rankCount = <span class="keyword">await</span> prisma.<span class="property">bili_rank</span>.<span class="title function_">count</span>(&#123;</span><br><span class="line">            <span class="attr">where</span>: &#123;</span><br><span class="line">                <span class="attr">video_aid</span>: &#123;</span><br><span class="line">                    <span class="attr">equals</span>: item.<span class="property">video_aid</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不在则可以插入</span></span><br><span class="line">        <span class="keyword">if</span> (rankCount == <span class="number">0</span>) &#123;</span><br><span class="line">            saveVideoInfo.<span class="title function_">push</span>(rank)</span><br><span class="line">        &#125;</span><br><span class="line">        retVideoinfo.<span class="title function_">push</span>(rank)</span><br><span class="line">    &#125;))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> batchSave = <span class="keyword">await</span> prisma.<span class="property">bili_rank</span>.<span class="title function_">createMany</span>(&#123;<span class="attr">data</span>:saveVideoInfo&#125;);</span><br></pre></td></tr></table></figure><h1 id="8、-express框架"><a href="#8、-express框架" class="headerlink" title="8、 express框架"></a>8、 express框架</h1><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -D</span><br></pre></td></tr></table></figure><h2 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(bodyparser.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">use</span>(bodyparser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//get</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="function">(<span class="params">req,resp</span>)=&gt;</span>&#123;</span><br><span class="line">    resp.<span class="title function_">json</span>(&#123;<span class="attr">id</span>:<span class="number">10</span>,<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//post</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/list&#x27;</span>,<span class="function">(<span class="params">req,resp</span>)=&gt;</span>&#123;</span><br><span class="line">    resp.<span class="title function_">json</span>(req.<span class="property">body</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listen to 3000 port&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="9、tailwind"><a href="#9、tailwind" class="headerlink" title="9、tailwind"></a>9、tailwind</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Logo</span> <span class="keyword">from</span> <span class="string">&#x27;../logo.svg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&#x27; flex justify-between items-center h-20&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;Logo&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">className</span>=<span class="string">&#x27; w-10 h-10&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">&#x27; flex items-center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">className</span>=<span class="string">&#x27; bg-gray-800 text-blue-50 ml-8 px-4 py-2 rounded flex items-center&#x27;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="10、解决跨域问题"><a href="#10、解决跨域问题" class="headerlink" title="10、解决跨域问题"></a>10、解决跨域问题</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i http-proxy-middleware -D</span><br></pre></td></tr></table></figure><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><p><strong>src&#x2F;setupProxy.js</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const <span class="punctuation">&#123;</span> createProxyMiddleware <span class="punctuation">&#125;</span> = require(&#x27;http-proxy-middleware&#x27;);</span><br><span class="line">module.exports = function (app) <span class="punctuation">&#123;</span></span><br><span class="line">    app.use(</span><br><span class="line">        &#x27;/api&#x27;<span class="punctuation">,</span></span><br><span class="line">        createProxyMiddleware(<span class="punctuation">&#123;</span></span><br><span class="line">            target<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//localhost:3001/&#x27;,</span></span><br><span class="line">            changeOrigin<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            pathRewrite<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                &#x27;^/api&#x27;<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span>)</span><br><span class="line">    );</span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-asm</title>
      <link href="/2022/01/19/linux-asm/"/>
      <url>/2022/01/19/linux-asm/</url>
      
        <content type="html"><![CDATA[<h1 id="1、从一个c程序开始"><a href="#1、从一个c程序开始" class="headerlink" title="1、从一个c程序开始"></a>1、从一个c程序开始</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个c程序要编译成linux上可执行文件，需要经历4个步骤：</p><ul><li>预处理</li><li>编译</li><li>汇编</li><li>链接<br>下面分别从这四个方面去看一下每个过程中流程代码</li></ul><blockquote><p>预处理</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> __overflow (FILE *, <span class="type">int</span>);</span><br><span class="line"># <span class="number">902</span> <span class="string">&quot;/usr/include/stdio.h&quot;</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"># <span class="number">2</span> <span class="string">&quot;hello.c&quot;</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">3</span> <span class="string">&quot;hello.c&quot;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是把stdio这个库添加到了 hello.c 这个文件当中</p><blockquote><p>编译  编译过程就是对预处理完的文件进行一系列的词法分析，语法分析，语义分析及优化后生成相应的汇编代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.i -o hello.s</span><br></pre></td></tr></table></figure><p>这个就是全部的汇编代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">.file<span class="string">&quot;hello.c&quot;</span></span><br><span class="line">.text</span><br><span class="line">.section.rodata</span><br><span class="line">.LC0:</span><br><span class="line">.string<span class="string">&quot;hello world&quot;</span></span><br><span class="line">.text</span><br><span class="line">.globlmain</span><br><span class="line">.<span class="built_in">type</span>main, @<span class="keyword">function</span></span><br><span class="line">main:</span><br><span class="line">.LFB0:</span><br><span class="line">.cfi_startproc</span><br><span class="line">endbr64</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset 6, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register 6</span><br><span class="line">leaq.LC0(%rip), %rax</span><br><span class="line">movq%rax, %rdi</span><br><span class="line">movl<span class="variable">$0</span>, %eax</span><br><span class="line">call<span class="built_in">printf</span>@PLT</span><br><span class="line">movl<span class="variable">$0</span>, %eax</span><br><span class="line">popq%rbp</span><br><span class="line">.cfi_def_cfa 7, 8</span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">.sizemain, .-main</span><br><span class="line">.ident<span class="string">&quot;GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0&quot;</span></span><br><span class="line">.section.note.GNU-stack,<span class="string">&quot;&quot;</span>,@progbits</span><br><span class="line">.section.note.gnu.property,<span class="string">&quot;a&quot;</span></span><br><span class="line">.align 8</span><br><span class="line">.long1f - 0f</span><br><span class="line">.long4f - 1f</span><br><span class="line">.long5</span><br></pre></td></tr></table></figure><blockquote><p>汇编  汇编过程调用对汇编代码进行处理，生成处理器能识别的指令，保存在后缀为.o 的目标文件中。当程序由多个源代码文件构成时，每个文件都要先完成汇编工作，生成.o 目标 文件后，才能进入下一步的链接工作。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c hello.c -o hello.o</span><br></pre></td></tr></table></figure><p><strong>.o格式的文件是elf的可重定向文件格式</strong></p><blockquote><p>链接 将程序的目标文件与所需的所有附加的目标文件连接起来，最终生成可执行文件。链接也分为静态链接和动态链接。静态链接是指在<strong>编译阶段</strong>直接把静态库加入到可执行文件中去，这样可执行 文件会比较大。动态链接则是指链接阶段仅仅只加入一些描述信息，而<strong>程序执行时</strong>再从系统中把相应动态库加载到内存中去</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello</span><br></pre></td></tr></table></figure><h1 id="2、Hello-world"><a href="#2、Hello-world" class="headerlink" title="2、Hello world"></a>2、Hello world</h1><h2 id="2-1、编码"><a href="#2-1、编码" class="headerlink" title="2.1、编码"></a>2.1、编码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    msg db &quot;Hello, world!&quot;, 0Ah ; 字符串常量，包括换行符</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov rax,1 ;系统调用号</span><br><span class="line"></span><br><span class="line">    mov rdi,1 ;1是标准输出</span><br><span class="line"></span><br><span class="line">    mov rsi,msg ;具体消息</span><br><span class="line"></span><br><span class="line">    mov rdx,14 ;消息长度</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,60   ;60是sys_exit</span><br><span class="line"></span><br><span class="line">    xor rdi,rdi ;exit 0</span><br><span class="line"></span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p><strong>编译</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nasm -f elf64 foo.asm &amp;&amp; ld -o foo foo.o</span><br></pre></td></tr></table></figure><h2 id="2-2、代码解释"><a href="#2-2、代码解释" class="headerlink" title="2.2、代码解释"></a>2.2、代码解释</h2><p><strong>syscall</strong></p><blockquote><p>在linux中 syscall 是一种系统自带的函数，我们可以在语言中直接进行调用 比如 <code>sys_exit</code>  <code>sys_write</code>  <code>read</code> 等等  常见的系统调用表如下</p></blockquote><table><thead><tr><th>系统调用号</th><th>函数名</th><th>入口点</th><th>源码</th></tr></thead><tbody><tr><td>0</td><td>read</td><td>sys_read</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/read_write.c">fs&#x2F;read_write.c</a></td></tr><tr><td>1</td><td>write</td><td>sys_write</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/read_write.c">fs&#x2F;read_write.c</a></td></tr><tr><td>2</td><td>open</td><td>sys_open</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/open.c">fs&#x2F;open.c</a></td></tr><tr><td>3</td><td>close</td><td>sys_close</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/open.c">fs&#x2F;open.c</a></td></tr><tr><td>4</td><td>stat</td><td>sys_newstat</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/stat.c">fs&#x2F;stat.c</a></td></tr><tr><td>5</td><td>fstat</td><td>sys_newfstat</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/stat.c">fs&#x2F;stat.c</a></td></tr><tr><td>6</td><td>lstat</td><td>sys_newlstat</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/stat.c">fs&#x2F;stat.c</a></td></tr><tr><td>7</td><td>poll</td><td>sys_poll</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/select.c">fs&#x2F;select.c</a></td></tr><tr><td>8</td><td>lseek</td><td>sys_lseek</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/read_write.c">fs&#x2F;read_write.c</a></td></tr><tr><td>9</td><td>mmap</td><td>sys_mmap</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/sys_x86_64.c">arch&#x2F;x86&#x2F;kernel&#x2F;sys_x86_64.c</a></td></tr><tr><td>10</td><td>mprotect</td><td>sys_mprotect</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/mm/mprotect.c">mm&#x2F;mprotect.c</a></td></tr><tr><td>11</td><td>munmap</td><td>sys_munmap</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/mm/mmap.c">mm&#x2F;mmap.c</a></td></tr><tr><td>12</td><td>brk</td><td>sys_brk</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/mm/mmap.c">mm&#x2F;mmap.c</a></td></tr><tr><td>13</td><td>rt_sigaction</td><td>sys_rt_sigaction</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/kernel/signal.c">kernel&#x2F;signal.c</a></td></tr><tr><td>14</td><td>rt_sigprocmask</td><td>sys_rt_sigprocmask</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/kernel/signal.c">kernel&#x2F;signal.c</a></td></tr><tr><td>15</td><td>rt_sigreturn</td><td>stub_rt_sigreturn</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/signal.c">arch&#x2F;x86&#x2F;kernel&#x2F;signal.c</a></td></tr><tr><td>16</td><td>ioctl</td><td>sys_ioctl</td><td><a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/ioctl.c">fs&#x2F;ioctl.c</a></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>我们在64位操作系统下，参数寄存器如下所示</strong></p><table><thead><tr><th>系统调用号</th><th>参数1</th><th>参数2</th><th>参数3</th><th>参数4</th><th>参数5</th><th>参数6</th><th>调用返回值</th></tr></thead><tbody><tr><td>rax</td><td>rdi</td><td>rsi</td><td>rdx</td><td>r10</td><td>r8</td><td>r9</td><td>rax</td></tr></tbody></table><p><strong>32位操作系统下，寄存器如下</strong></p><table><thead><tr><th>系统调用号</th><th>参数1</th><th>参数2</th><th>参数3</th><th>参数4</th><th>参数5</th><th>参数6</th><th>调用返回值</th></tr></thead><tbody><tr><td>eax</td><td>ebx</td><td>ecx</td><td>edx</td><td></td><td></td><td></td><td>eax</td></tr></tbody></table><p><strong>字符串长度计算</strong></p><p>在nasm中 $ 等于当前行开头的地址， <code>$$</code> 等于当前section的开头地址</p><h1 id="3、基本语法"><a href="#3、基本语法" class="headerlink" title="3、基本语法"></a>3、基本语法</h1><h2 id="3-1、寻址模式"><a href="#3-1、寻址模式" class="headerlink" title="3.1、寻址模式"></a>3.1、寻址模式</h2><p><strong>dd、dw、db的区别：</strong></p><ul><li>db代表的是字节类型变量  一个字节占用一个字节单元</li><li>dw定义字类型变量，一个字类型是两个字节单元</li><li>dd定义双字类型变量  一个双字类型是四个字节单元</li></ul><blockquote><p><strong>寄存器寻址 在此寻址模式下，寄存器包含操作数。 根据指令的不同，寄存器可能是第一个操作数、第二个操作数或两者。</strong></p></blockquote><p>8位寄存器：AH、AL，BH、BL、CH、CL、DH、DL</p><p>16位寄存器：AX、BX、CX、DX、SI、DI、BP、SP</p><p><strong>例子</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    msg db &quot;aaa&quot;</span><br><span class="line"></span><br><span class="line">    a db 50 ;变量a的值为10</span><br><span class="line"></span><br><span class="line">    b db 47 ;变量b的值为11</span><br><span class="line"></span><br><span class="line">    res db 0 ;相加结果</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">   global _start</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov al,[a]</span><br><span class="line"></span><br><span class="line">    add al,[b]</span><br><span class="line"></span><br><span class="line">    mov [res],al</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,1 ;系统调用号</span><br><span class="line"></span><br><span class="line">    mov rdi,1 ;1是标准输出</span><br><span class="line"></span><br><span class="line">    mov rsi,res ;具体消息  这个打印出来是 ascii码</span><br><span class="line"></span><br><span class="line">    mov rdx,8 ;消息长度</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,60   ;60是sys_exit</span><br><span class="line"></span><br><span class="line">    xor rdi,rdi ;exit 0</span><br><span class="line"></span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><blockquote><p>立即寻址  通常用来操作立即数  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al,40H</span><br><span class="line"></span><br><span class="line">add al,57H</span><br></pre></td></tr></table></figure><blockquote><p>内存寻址  </p></blockquote><p><strong>直接内存偏移寻址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ax,ds:[2000H]</span><br></pre></td></tr></table></figure><ul><li>前缀ds表示该单元在数据段   然后在2000偏移的地方读一个字</li></ul><p>操作数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    arr db 9,8,7,6,5</span><br><span class="line"></span><br><span class="line">    ar2 dw 111,222,333</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov cl,arr[2];访问到7  db是一个字节单位  cl是一个8位寄存器</span><br><span class="line"></span><br><span class="line">    mov cl arr+2;不同的方式</span><br><span class="line"></span><br><span class="line">    mov cx ar2[2] ;访问到333 dw是一个字 两字节单位 所以用 cx是一个16位的寄存器</span><br><span class="line"></span><br><span class="line">    mov cx ar2+2</span><br></pre></td></tr></table></figure><p><strong>间接内存寻址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MY_TABLE TIMES 10 DW 0  ; 长度为10 的一个 字类型数组  16位</span><br><span class="line">MOV EBX, [MY_TABLE]     ; Effective Address of MY_TABLE in EBX</span><br><span class="line">MOV [EBX], 110          ; MY_TABLE[0] = 110</span><br><span class="line">ADD EBX, 2              ; EBX = EBX +2</span><br><span class="line">MOV [EBX], 123          ; MY_TABLE[1] = 123</span><br></pre></td></tr></table></figure><p><strong>常见的类型说明符</strong></p><table><thead><tr><th>类型说明符</th><th>寻址字节数</th><th></th></tr></thead><tbody><tr><td>BYTE</td><td>1</td><td></td></tr><tr><td>WORD</td><td>2</td><td></td></tr><tr><td>DWORD</td><td>4</td><td></td></tr><tr><td>QWORD</td><td>8</td><td></td></tr><tr><td>TBYTE</td><td>10</td><td></td></tr></tbody></table><p><strong>基于指针的寻址：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line">    str db &#x27;Hello, world!&#x27;,0</span><br><span class="line">    ptr dd str</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    mov eax, [ptr] ; 获取字符串首地址的值，即&#x27;H&#x27;</span><br><span class="line">    mov [ptr], al ; 将&#x27;H&#x27;存储到字符串首地址</span><br><span class="line">    mov eax, [ptr+1] ; 获取字符串首地址后一个字符的值，即&#x27;e&#x27;</span><br><span class="line">    mov [ptr+1], al ; 将&#x27;e&#x27;存储到字符串首地址后一个位置</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>基址加变址寻址：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line">    str db &#x27;Hello, world!&#x27;,0</span><br><span class="line">    bx dw str ; 设置基地址寄存器 bx 为字符串首地址</span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    mov si, bx ; 设置偏移量寄存器 si 为 0</span><br><span class="line">    mov di, bx + 25 ; 设置偏移量寄存器 di 为 25</span><br><span class="line">    mov al, [si] ; 获取字符串首地址处的值，即&#x27;H&#x27;</span><br><span class="line">    mov [di], al ; 将&#x27;H&#x27;存储到字符串首地址后一个位置</span><br><span class="line">    inc si ; si 递增</span><br><span class="line">    dec di ; di 递减</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-2、变量"><a href="#3-2、变量" class="headerlink" title="3.2、变量"></a>3.2、变量</h2><p>在汇编语言中，有五种分配空间的大小，他可以保留或初始化各种空间，通常称其为 &#x3D;&#x3D;<strong>define指令</strong>&#x3D;&#x3D;</p><table><thead><tr><th>指令</th><th>用途</th><th>存储空间</th></tr></thead><tbody><tr><td>DB</td><td>定义 Byte</td><td>分配1个字节</td></tr><tr><td>DW</td><td>定义 Word</td><td>&#x3D;&#x3D;分配&#x3D;&#x3D;2个字节</td></tr><tr><td>DD</td><td>定义 Doubleword</td><td>分配4个字节</td></tr><tr><td>DQ</td><td>定义 Quadword</td><td>分配8个字节</td></tr><tr><td>DT</td><td>定义十个字节</td><td>分配10个字节</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    a db &#x27;x&#x27;</span><br><span class="line"></span><br><span class="line">    b dw 12345</span><br><span class="line"></span><br><span class="line">    c dq 123456789</span><br><span class="line"></span><br><span class="line">    d dd 1.234</span><br><span class="line"></span><br><span class="line">    e dq 123.456</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov rax,1</span><br><span class="line"></span><br><span class="line">    mov rdi,1</span><br><span class="line"></span><br><span class="line">    mov rsi,a,</span><br><span class="line"></span><br><span class="line">    mov rdx,1</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,60</span><br><span class="line"></span><br><span class="line">    xor rdi,rdi</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3、常量"><a href="#3-3、常量" class="headerlink" title="3.3、常量"></a>3.3、常量</h2><blockquote><p>在汇编语言中 有三种定义常量的方式 </p><ul><li>EQU</li><li>%assign</li><li>%define</li></ul></blockquote><p><strong>EQU</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">STDOUT equ 1</span><br><span class="line"></span><br><span class="line">SYS_WRITE equ 1</span><br><span class="line"></span><br><span class="line">SYS_EXIT equ 60</span><br><span class="line"></span><br><span class="line">SYS_EXIT_AREA equ STDOUT*SYS_EXIT</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    msg db &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">    msglen equ $-msg</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,SYS_WRITE</span><br><span class="line"></span><br><span class="line">    mov rdi,STDOUT</span><br><span class="line"></span><br><span class="line">    mov rsi,msg</span><br><span class="line"></span><br><span class="line">    mov rdx,msglen</span><br><span class="line"></span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    mov rax,SYS_EXIT_AREA</span><br><span class="line"></span><br><span class="line">    xor rdi,rdi</span><br><span class="line"></span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure><p><strong>%assign指定通常用于表示数字常量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%assign TOTAL 10</span><br><span class="line"></span><br><span class="line">msg db &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">MOV EBX,USER_NAME</span><br></pre></td></tr></table></figure><p><strong>%define指令通常用于表示数字或者字符串常量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%define USER_NAME [ebp+4]</span><br><span class="line"></span><br><span class="line">msg db &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">MOV EBX,USER_NAME</span><br></pre></td></tr></table></figure><h2 id="3-4、算术指令"><a href="#3-4、算术指令" class="headerlink" title="3.4、算术指令"></a>3.4、算术指令</h2><p><strong>算术指令主要有以下四类</strong></p><ul><li>inc&#x2F;dec   寄存器或者单个操作数的加减</li><li>add&#x2F;sub  二进制数的加减</li><li>mul&#x2F;imul</li><li>div&#x2F;idiv</li></ul><h3 id="3-4-1、加减"><a href="#3-4-1、加减" class="headerlink" title="3.4.1、加减"></a>3.4.1、加减</h3><p><strong>inc&#x2F;dec 示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">section .data</span><br><span class="line"></span><br><span class="line">    count db 98</span><br><span class="line"></span><br><span class="line">    nexta db 5</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line">    global _start</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">    mov rbx,count</span><br><span class="line"></span><br><span class="line">    dec byte [rbx]</span><br><span class="line">    inc byte [rbx]</span><br><span class="line">    ;或者 inc rbx 都是可以的</span><br></pre></td></tr></table></figure><p><strong>add&#x2F;sub示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov eax,10</span><br><span class="line">mov ebx,5</span><br><span class="line">sub eax,ebx</span><br><span class="line">add eax,ebx</span><br></pre></td></tr></table></figure><h3 id="3-4-2、乘除"><a href="#3-4-2、乘除" class="headerlink" title="3.4.2、乘除"></a>3.4.2、乘除</h3><p><strong>mul&#x2F;imul示例</strong></p><p><strong>imul和idiv用于处理有符号的数据</strong></p><table><thead><tr><th>序号</th><th>场景</th></tr></thead><tbody><tr><td>1</td><td><strong>当两个字节相乘时 −</strong><br><br>被乘数在AL寄存器中，乘数是内存中或另一个寄存器中的一个字节。 该产品在 AX 中。 乘积的高8位存放在AH中，低8位存放在AL中。<br><br><style>.plzkaioavsnr{}</style><img src="/2022/01/19/linux-asm/arithmetic1.jpg" class="plzkaioavsnr" alt="Arithmetic1"></td></tr><tr><td>2</td><td><strong>当两个单字值相乘时 −</strong><br><br>被乘数应该在AX寄存器中，乘数是内存或另一个寄存器中的一个字。 例如，对于像MUL DX这样的指令，您必须将乘数存储在DX中，将被乘数存储在AX中。<br><br>生成的结果是一个双字，需要两个寄存器。 高位（最左边）部分存储在 DX 中，低位（最右边）部分存储在 AX 中。<br><br><style>.wtvnpaewiplg{}</style><img src="/2022/01/19/linux-asm/arithmetic2.jpg" class="wtvnpaewiplg" alt="Arithmetic2"></td></tr><tr><td>3</td><td><strong>当两个双字值相乘时−</strong><br><br>当两个双字值相乘时，被乘数应位于 EAX 中，乘数是存储在内存或另一个寄存器中的双字值。 生成的乘积存储在 EDX:EAX 寄存器中，即高位 32 位存储在 EDX 寄存器中，低位 32 位存储在 EAX 寄存器中。<br><br><style>.bcbihfxmuhci{}</style><img src="/2022/01/19/linux-asm/arithmetic3.jpg" class="bcbihfxmuhci" alt="Arithmetic3"></td></tr></tbody></table><p>hvb-]&#96;&#96;&#96;z80<br>MOV AL, 10<br>MOV DL, 25<br>MUL DL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">**div/idiv示例**</span><br><span class="line"></span><br><span class="line">```z80</span><br><span class="line">MOV AL, byte 10</span><br><span class="line">MOV DL, byte 5</span><br><span class="line">div DL</span><br></pre></td></tr></table></figure><h2 id="4、逻辑指令"><a href="#4、逻辑指令" class="headerlink" title="4、逻辑指令"></a>4、逻辑指令</h2><table><thead><tr><th>序号</th><th>说明</th><th>格式</th><th></th></tr></thead><tbody><tr><td>1</td><td>AND</td><td>AND operand1, operand2</td><td></td></tr><tr><td>2</td><td>OR</td><td>OR operand1, operand2</td><td></td></tr><tr><td>3</td><td>XOR</td><td>XOR operand1, operand2</td><td></td></tr><tr><td>4</td><td>TEST</td><td>TEST operand1, operand2</td><td></td></tr><tr><td>5</td><td>NOT</td><td>NOT operand1</td><td></td></tr></tbody></table><p><strong>AND 按位与操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV DL, byte 58</span><br><span class="line">AND DL,0FH</span><br><span class="line">MOV CL,DL</span><br></pre></td></tr></table></figure><p>AND 运算可用于清除一位或多位。 例如，假设BL寄存器包含0011 1010。如果需要将高位清零，则与0FH进行AND运算。</p><p>那么结果就是 11 1010 &amp; 00 1111 就是 1010</p><p><strong>其他的也是和其他语言类似的作用 没有什么区别 无非就是  与、或 、非、异或</strong></p><h2 id="5、条件控制"><a href="#5、条件控制" class="headerlink" title="5、条件控制"></a>5、条件控制</h2><table><thead><tr><th>无条件跳转</th><th>jmp</th></tr></thead><tbody><tr><td><strong>条件跳转</strong></td><td>这是根据条件由一组跳转指令 j&lt;condition&gt; 执行的。 条件指令通过中断顺序流来转移控制，并通过更改 IP 中的偏移值来实现。</td></tr></tbody></table><p><strong>CMP指令：用于比较两个操作数是否相等，一般用在循环条件控制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">mov ebx,1</span><br><span class="line">cmp ebx,1;如果 ebx==1 执行addfunc  否则向下执行</span><br><span class="line">jne AddFunc</span><br><span class="line">mov ebx,30</span><br><span class="line">jmp end</span><br><span class="line"></span><br><span class="line">AddFunc:</span><br><span class="line">add ebx,9</span><br><span class="line">jmp end</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>求两个数的最大值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">section .text</span><br><span class="line">global _start</span><br><span class="line"></span><br><span class="line">section .data</span><br><span class="line">n1 dd &#x27;30&#x27;</span><br><span class="line">n2 dd &#x27;40&#x27;</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"></span><br><span class="line">mov ebx,[n1]</span><br><span class="line">mov ecx,[n2]</span><br><span class="line">cmp ebx,ecx</span><br><span class="line">jge Max</span><br><span class="line">mov edx,ecx</span><br><span class="line">jmp end</span><br><span class="line"></span><br><span class="line">Max:</span><br><span class="line">mov edx,ebx</span><br><span class="line">jmp end</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
